{"ast":null,"code":"import { absolute, greaterThan, isHalf } from '../utils';\nimport { down, up } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round up.\n *\n * Rounding up happens when:\n * - The quotient is half (e.g., -1.5, 1.5).\n * - The quotient is positive and greater than half (e.g., 1.6).\n * - The quotient is negative and less than half (e.g., -1.4).\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport var halfUp = function halfUp(amount, factor, calculator) {\n  var greaterThanFn = greaterThan(calculator);\n  var isHalfFn = isHalf(calculator);\n  var absoluteFn = absolute(calculator);\n  var zero = calculator.zero();\n  var remainder = absoluteFn(calculator.modulo(amount, factor));\n  var difference = calculator.subtract(factor, remainder);\n  var isLessThanHalf = greaterThanFn(difference, remainder);\n  var isPositive = greaterThanFn(amount, zero);\n  if (isHalfFn(amount, factor) || isPositive && !isLessThanHalf || !isPositive && isLessThanHalf) {\n    return up(amount, factor, calculator);\n  }\n  return down(amount, factor, calculator);\n};","map":{"version":3,"names":["absolute","greaterThan","isHalf","down","up","halfUp","amount","factor","calculator","greaterThanFn","isHalfFn","absoluteFn","zero","remainder","modulo","difference","subtract","isLessThanHalf","isPositive"],"sources":["/Users/chris/Desktop/uber/node_modules/@dinero.js/core/dist/esm/divide/halfUp.js"],"sourcesContent":["import { absolute, greaterThan, isHalf } from '../utils';\nimport { down, up } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round up.\n *\n * Rounding up happens when:\n * - The quotient is half (e.g., -1.5, 1.5).\n * - The quotient is positive and greater than half (e.g., 1.6).\n * - The quotient is negative and less than half (e.g., -1.4).\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport var halfUp = function halfUp(amount, factor, calculator) {\n  var greaterThanFn = greaterThan(calculator);\n  var isHalfFn = isHalf(calculator);\n  var absoluteFn = absolute(calculator);\n  var zero = calculator.zero();\n  var remainder = absoluteFn(calculator.modulo(amount, factor));\n  var difference = calculator.subtract(factor, remainder);\n  var isLessThanHalf = greaterThanFn(difference, remainder);\n  var isPositive = greaterThanFn(amount, zero);\n  if (isHalfFn(amount, factor) || isPositive && !isLessThanHalf || !isPositive && isLessThanHalf) {\n    return up(amount, factor, calculator);\n  }\n  return down(amount, factor, calculator);\n};"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,MAAM,QAAQ,UAAU;AACxD,SAASC,IAAI,EAAEC,EAAE,QAAQ,GAAG;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,MAAM,GAAG,SAASA,MAAMA,CAACC,MAAM,EAAEC,MAAM,EAAEC,UAAU,EAAE;EAC9D,IAAIC,aAAa,GAAGR,WAAW,CAACO,UAAU,CAAC;EAC3C,IAAIE,QAAQ,GAAGR,MAAM,CAACM,UAAU,CAAC;EACjC,IAAIG,UAAU,GAAGX,QAAQ,CAACQ,UAAU,CAAC;EACrC,IAAII,IAAI,GAAGJ,UAAU,CAACI,IAAI,CAAC,CAAC;EAC5B,IAAIC,SAAS,GAAGF,UAAU,CAACH,UAAU,CAACM,MAAM,CAACR,MAAM,EAAEC,MAAM,CAAC,CAAC;EAC7D,IAAIQ,UAAU,GAAGP,UAAU,CAACQ,QAAQ,CAACT,MAAM,EAAEM,SAAS,CAAC;EACvD,IAAII,cAAc,GAAGR,aAAa,CAACM,UAAU,EAAEF,SAAS,CAAC;EACzD,IAAIK,UAAU,GAAGT,aAAa,CAACH,MAAM,EAAEM,IAAI,CAAC;EAC5C,IAAIF,QAAQ,CAACJ,MAAM,EAAEC,MAAM,CAAC,IAAIW,UAAU,IAAI,CAACD,cAAc,IAAI,CAACC,UAAU,IAAID,cAAc,EAAE;IAC9F,OAAOb,EAAE,CAACE,MAAM,EAAEC,MAAM,EAAEC,UAAU,CAAC;EACvC;EACA,OAAOL,IAAI,CAACG,MAAM,EAAEC,MAAM,EAAEC,UAAU,CAAC;AACzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}