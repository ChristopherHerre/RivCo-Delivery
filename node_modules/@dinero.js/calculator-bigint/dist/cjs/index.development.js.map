{"version":3,"file":"index.development.js","sources":["../../src/api/add.ts","../../../core/dist/esm/types/Calculator.js","../../src/api/compare.ts","../../src/api/decrement.ts","../../src/api/increment.ts","../../src/api/integerDivide.ts","../../src/api/modulo.ts","../../src/api/multiply.ts","../../src/api/power.ts","../../src/api/subtract.ts","../../src/api/zero.ts","../../src/calculator.ts"],"sourcesContent":["import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the sum of two bigints.\n *\n * @param augend - The bigint to add to.\n * @param addend - The bigint to add.\n *\n * @returns The sum of the two bigints.\n */\nexport const add: BinaryOperation<bigint> = (augend, addend) => {\n  return augend + addend;\n};\n","/* eslint-disable functional/no-mixed-type */\n\nexport var ComparisonOperator;\n(function (ComparisonOperator) {\n  ComparisonOperator[ComparisonOperator[\"LT\"] = -1] = \"LT\";\n  ComparisonOperator[ComparisonOperator[\"EQ\"] = 0] = \"EQ\";\n  ComparisonOperator[ComparisonOperator[\"GT\"] = 1] = \"GT\";\n})(ComparisonOperator || (ComparisonOperator = {}));","import { ComparisonOperator } from '@dinero.js/core';\nimport type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Compare two bigints.\n *\n * @param a - The first bigint to compare.\n * @param b - The second bigint to compare.\n *\n * @returns Whether the two bigints are equal, or whether the first one is greater or less than the other.\n */\nexport const compare: BinaryOperation<bigint, ComparisonOperator> = (a, b) => {\n  if (a < b) {\n    return ComparisonOperator.LT;\n  }\n  if (a > b) {\n    return ComparisonOperator.GT;\n  }\n  return ComparisonOperator.EQ;\n};\n","import type { UnaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an decremented bigint.\n *\n * @param value - The bigint to decrement.\n *\n * @returns The decremented bigint.\n */\nexport const decrement: UnaryOperation<bigint> = (value) => {\n  return value - 1n;\n};\n","import type { UnaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an incremented bigint.\n *\n * @param value - The bigint to increment.\n *\n * @returns The incremented bigint.\n */\nexport const increment: UnaryOperation<bigint> = (value) => {\n  return value + 1n;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the quotient of two bigints with no fractional part.\n *\n * @param dividend - The bigint to divide.\n * @param divisor - The bigint to divide with.\n *\n * @returns The quotient of the two bigints.\n */\nexport const integerDivide: BinaryOperation<bigint> = (dividend, divisor) => {\n  return dividend / divisor;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the remainder of two bigints.\n *\n * @param dividend - The bigint to divide.\n * @param divisor - The bigint to divide with.\n *\n * @returns The remainder of the two bigints.\n */\nexport const modulo: BinaryOperation<bigint> = (dividend, divisor) => {\n  return dividend % divisor;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the product of two bigints.\n *\n * @param multiplicand - The bigint to multiply.\n * @param multiplier - The bigint to multiply with.\n *\n * @returns The product of the two bigints.\n */\nexport const multiply: BinaryOperation<bigint> = (multiplicand, multiplier) => {\n  return multiplicand * multiplier;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an bigint to the power of an exponent.\n *\n * @param base - The base bigint.\n * @param exponent - The exponent to raise the base to.\n *\n * @returns The base to the power of the exponent.\n */\nexport const power: BinaryOperation<bigint> = (base, exponent) => {\n  return base ** exponent;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the difference between two bigints.\n *\n * @param minuend - The bigint to subtract from.\n * @param subtrahend - The bigint to subtract.\n *\n * @returns The difference of the two bigints.\n */\nexport const subtract: BinaryOperation<bigint> = (minuend, subtrahend) => {\n  return minuend - subtrahend;\n};\n","/**\n * Return zero as a bigint.\n *\n * @returns Zero as a bigint.\n */\nexport function zero() {\n  return 0n;\n}\n","import {\n  add,\n  compare,\n  decrement,\n  increment,\n  integerDivide,\n  modulo,\n  multiply,\n  power,\n  subtract,\n  zero,\n} from './api';\n\nexport const calculator = {\n  add,\n  compare,\n  decrement,\n  increment,\n  integerDivide,\n  modulo,\n  multiply,\n  power,\n  subtract,\n  zero,\n};\n"],"names":["add","augend","addend","ComparisonOperator","compare","a","b","LT","GT","EQ","decrement","value","increment","integerDivide","dividend","divisor","modulo","multiply","multiplicand","multiplier","power","base","exponent","subtract","minuend","subtrahend","zero","calculator"],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaA,GAA4B,GAAG,CAACC,MAAM,EAAEC,MAAM,KAAK;EAC9D,OAAOD,MAAM,GAAGC,MAAM,CAAA;AACxB;;ACZA;;AAEO,IAAIC,kBAAkB,CAAA;AAC7B,CAAC,UAAUA,kBAAkB,EAAE;EAC7BA,kBAAkB,CAACA,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;EACxDA,kBAAkB,CAACA,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAA;EACvDA,kBAAkB,CAACA,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAA;AACzD,CAAC,EAAEA,kBAAkB,KAAKA,kBAAkB,GAAG,EAAE,CAAC,CAAC;;ACJnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,OAAoD,GAAG,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC5E,IAAID,CAAC,GAAGC,CAAC,EAAE;IACT,OAAOH,kBAAkB,CAACI,EAAE,CAAA;AAC9B,GAAA;EACA,IAAIF,CAAC,GAAGC,CAAC,EAAE;IACT,OAAOH,kBAAkB,CAACK,EAAE,CAAA;AAC9B,GAAA;EACA,OAAOL,kBAAkB,CAACM,EAAE,CAAA;AAC9B;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACaC,MAAAA,SAAiC,GAAIC,KAAK,IAAK;EAC1D,OAAOA,KAAK,GAAG,EAAE,CAAA;AACnB;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACaC,MAAAA,SAAiC,GAAID,KAAK,IAAK;EAC1D,OAAOA,KAAK,GAAG,EAAE,CAAA;AACnB;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaE,aAAsC,GAAG,CAACC,QAAQ,EAAEC,OAAO,KAAK;EAC3E,OAAOD,QAAQ,GAAGC,OAAO,CAAA;AAC3B;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,MAA+B,GAAG,CAACF,QAAQ,EAAEC,OAAO,KAAK;EACpE,OAAOD,QAAQ,GAAGC,OAAO,CAAA;AAC3B;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaE,QAAiC,GAAG,CAACC,YAAY,EAAEC,UAAU,KAAK;EAC7E,OAAOD,YAAY,GAAGC,UAAU,CAAA;AAClC;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,KAA8B,GAAG,CAACC,IAAI,EAAEC,QAAQ,KAAK;EAChE,OAAOD,IAAI,IAAIC,QAAQ,CAAA;AACzB;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,QAAiC,GAAG,CAACC,OAAO,EAAEC,UAAU,KAAK;EACxE,OAAOD,OAAO,GAAGC,UAAU,CAAA;AAC7B;;ACZA;AACA;AACA;AACA;AACA;AACO,SAASC,IAAI,GAAG;AACrB,EAAA,OAAO,EAAE,CAAA;AACX;;ACMO,MAAMC,UAAU,GAAG;EACxB3B,GAAG;EACHI,OAAO;EACPM,SAAS;EACTE,SAAS;EACTC,aAAa;EACbG,MAAM;EACNC,QAAQ;EACRG,KAAK;EACLG,QAAQ;AACRG,EAAAA,IAAAA;AACF;;;;;;;;;;;;;;"}