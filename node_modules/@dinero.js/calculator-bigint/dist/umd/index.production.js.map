{"version":3,"file":"index.production.js","sources":["../../src/api/add.ts","../../../core/dist/esm/types/Calculator.js","../../src/api/compare.ts","../../src/api/decrement.ts","../../src/api/increment.ts","../../src/api/integerDivide.ts","../../src/api/modulo.ts","../../src/api/multiply.ts","../../src/api/power.ts","../../src/api/subtract.ts","../../src/api/zero.ts","../../src/calculator.ts"],"sourcesContent":["import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the sum of two bigints.\n *\n * @param augend - The bigint to add to.\n * @param addend - The bigint to add.\n *\n * @returns The sum of the two bigints.\n */\nexport const add: BinaryOperation<bigint> = (augend, addend) => {\n  return augend + addend;\n};\n","/* eslint-disable functional/no-mixed-type */\n\nexport var ComparisonOperator;\n(function (ComparisonOperator) {\n  ComparisonOperator[ComparisonOperator[\"LT\"] = -1] = \"LT\";\n  ComparisonOperator[ComparisonOperator[\"EQ\"] = 0] = \"EQ\";\n  ComparisonOperator[ComparisonOperator[\"GT\"] = 1] = \"GT\";\n})(ComparisonOperator || (ComparisonOperator = {}));","import { ComparisonOperator } from '@dinero.js/core';\nimport type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Compare two bigints.\n *\n * @param a - The first bigint to compare.\n * @param b - The second bigint to compare.\n *\n * @returns Whether the two bigints are equal, or whether the first one is greater or less than the other.\n */\nexport const compare: BinaryOperation<bigint, ComparisonOperator> = (a, b) => {\n  if (a < b) {\n    return ComparisonOperator.LT;\n  }\n  if (a > b) {\n    return ComparisonOperator.GT;\n  }\n  return ComparisonOperator.EQ;\n};\n","import type { UnaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an decremented bigint.\n *\n * @param value - The bigint to decrement.\n *\n * @returns The decremented bigint.\n */\nexport const decrement: UnaryOperation<bigint> = (value) => {\n  return value - 1n;\n};\n","import type { UnaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an incremented bigint.\n *\n * @param value - The bigint to increment.\n *\n * @returns The incremented bigint.\n */\nexport const increment: UnaryOperation<bigint> = (value) => {\n  return value + 1n;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the quotient of two bigints with no fractional part.\n *\n * @param dividend - The bigint to divide.\n * @param divisor - The bigint to divide with.\n *\n * @returns The quotient of the two bigints.\n */\nexport const integerDivide: BinaryOperation<bigint> = (dividend, divisor) => {\n  return dividend / divisor;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the remainder of two bigints.\n *\n * @param dividend - The bigint to divide.\n * @param divisor - The bigint to divide with.\n *\n * @returns The remainder of the two bigints.\n */\nexport const modulo: BinaryOperation<bigint> = (dividend, divisor) => {\n  return dividend % divisor;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the product of two bigints.\n *\n * @param multiplicand - The bigint to multiply.\n * @param multiplier - The bigint to multiply with.\n *\n * @returns The product of the two bigints.\n */\nexport const multiply: BinaryOperation<bigint> = (multiplicand, multiplier) => {\n  return multiplicand * multiplier;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an bigint to the power of an exponent.\n *\n * @param base - The base bigint.\n * @param exponent - The exponent to raise the base to.\n *\n * @returns The base to the power of the exponent.\n */\nexport const power: BinaryOperation<bigint> = (base, exponent) => {\n  return base ** exponent;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the difference between two bigints.\n *\n * @param minuend - The bigint to subtract from.\n * @param subtrahend - The bigint to subtract.\n *\n * @returns The difference of the two bigints.\n */\nexport const subtract: BinaryOperation<bigint> = (minuend, subtrahend) => {\n  return minuend - subtrahend;\n};\n","/**\n * Return zero as a bigint.\n *\n * @returns Zero as a bigint.\n */\nexport function zero() {\n  return 0n;\n}\n","import {\n  add,\n  compare,\n  decrement,\n  increment,\n  integerDivide,\n  modulo,\n  multiply,\n  power,\n  subtract,\n  zero,\n} from './api';\n\nexport const calculator = {\n  add,\n  compare,\n  decrement,\n  increment,\n  integerDivide,\n  modulo,\n  multiply,\n  power,\n  subtract,\n  zero,\n};\n"],"names":["add","augend","addend","ComparisonOperator","compare","a","b","LT","GT","EQ","decrement","value","increment","integerDivide","dividend","divisor","modulo","multiply","multiplicand","multiplier","power","base","exponent","subtract","minuend","subtrahend","zero","calculator"],"mappings":";6QAUaA,EAA+B,CAACC,EAAQC,IAC5CD,EAASC,ECTX,IAAIC,GACX,SAAWA,GACTA,EAAmBA,EAAuB,IAAK,GAAK,KACpDA,EAAmBA,EAAuB,GAAI,GAAK,KACnDA,EAAmBA,EAAuB,GAAI,GAAK,IACpD,CAJD,CAIGA,IAAuBA,EAAqB,CAAA,UCIlCC,EAAuD,CAACC,EAAGC,IAClED,EAAIC,EACCH,EAAmBI,GAExBF,EAAIC,EACCH,EAAmBK,GAErBL,EAAmBM,GCTfC,EAAqCC,GACzCA,EAAQ,GCDJC,EAAqCD,GACzCA,EAAQ,GCAJE,EAAyC,CAACC,EAAUC,IACxDD,EAAWC,ECDPC,EAAkC,CAACF,EAAUC,IACjDD,EAAWC,ECDPE,EAAoC,CAACC,EAAcC,IACvDD,EAAeC,ECDXC,EAAiC,CAACC,EAAMC,IAC5CD,GAAQC,ECDJC,EAAoC,CAACC,EAASC,IAClDD,EAAUC,ECNZ,SAASC,IACd,OAAO,EACT,CCMO,MAAMC,EAAa,CACxB3B,MACAI,UACAM,YACAE,YACAC,gBACAG,SACAC,WACAG,QACAG,WACAG"}