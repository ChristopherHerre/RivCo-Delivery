{"version":3,"file":"index.production.js","sources":["../../src/api/add.ts","../../../core/dist/esm/types/Calculator.js","../../src/api/compare.ts","../../src/api/decrement.ts","../../src/api/increment.ts","../../src/api/integerDivide.ts","../../src/api/modulo.ts","../../src/api/multiply.ts","../../src/api/power.ts","../../src/api/subtract.ts","../../src/api/zero.ts","../../src/calculator.ts"],"sourcesContent":["import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the sum of two numbers.\n *\n * @param augend - The number to add to.\n * @param addend - The number to add.\n *\n * @returns The sum of the two numbers.\n */\nexport const add: BinaryOperation<number> = (augend, addend) => {\n  return augend + addend;\n};\n","/* eslint-disable functional/no-mixed-type */\n\nexport var ComparisonOperator;\n(function (ComparisonOperator) {\n  ComparisonOperator[ComparisonOperator[\"LT\"] = -1] = \"LT\";\n  ComparisonOperator[ComparisonOperator[\"EQ\"] = 0] = \"EQ\";\n  ComparisonOperator[ComparisonOperator[\"GT\"] = 1] = \"GT\";\n})(ComparisonOperator || (ComparisonOperator = {}));","import { ComparisonOperator } from '@dinero.js/core';\nimport type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Compare two numbers.\n *\n * @param a - The first number to compare.\n * @param b - The second number to compare.\n *\n * @returns Whether the two numbers are equal, or whether the first one is greater or less than the other.\n */\nexport const compare: BinaryOperation<number, ComparisonOperator> = (a, b) => {\n  if (a < b) {\n    return ComparisonOperator.LT;\n  }\n  if (a > b) {\n    return ComparisonOperator.GT;\n  }\n  return ComparisonOperator.EQ;\n};\n","import type { UnaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an decremented number.\n *\n * @param value - The number to decrement.\n *\n * @returns The decremented number.\n */\nexport const decrement: UnaryOperation<number> = (value) => {\n  return value - 1;\n};\n","import type { UnaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an incremented number.\n *\n * @param value - The number to increment.\n *\n * @returns The incremented number.\n */\nexport const increment: UnaryOperation<number> = (value) => {\n  return value + 1;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the quotient of two numbers with no fractional part.\n *\n * @param dividend - The number to divide.\n * @param divisor - The number to divide with.\n *\n * @returns The quotient of the two numbers.\n */\nexport const integerDivide: BinaryOperation<number> = (dividend, divisor) => {\n  return Math.trunc(dividend / divisor);\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the remainder of two numbers.\n *\n * @param dividend - The number to divide.\n * @param divisor - The number to divide with.\n *\n * @returns The remainder of the two numbers.\n */\nexport const modulo: BinaryOperation<number> = (dividend, divisor) => {\n  return dividend % divisor;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the product of two numbers.\n *\n * @param multiplicand - The number to multiply.\n * @param multiplier - The number to multiply with.\n *\n * @returns The product of the two numbers.\n */\nexport const multiply: BinaryOperation<number> = (multiplicand, multiplier) => {\n  return multiplicand * multiplier;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns an number to the power of an exponent.\n *\n * @param base - The base number.\n * @param exponent - The exponent to raise the base to.\n *\n * @returns The base to the power of the exponent.\n */\nexport const power: BinaryOperation<number> = (base, exponent) => {\n  return base ** exponent;\n};\n","import type { BinaryOperation } from '@dinero.js/core';\n\n/**\n * Returns the difference between two numbers.\n *\n * @param minuend - The number to subtract from.\n * @param subtrahend - The number to subtract.\n *\n * @returns The difference of the two numbers.\n */\nexport const subtract: BinaryOperation<number> = (minuend, subtrahend) => {\n  return minuend - subtrahend;\n};\n","/**\n * Return zero as a number.\n *\n * @returns Zero as a number.\n */\nexport function zero() {\n  return 0;\n}\n","import {\n  add,\n  compare,\n  decrement,\n  increment,\n  integerDivide,\n  modulo,\n  multiply,\n  power,\n  subtract,\n  zero,\n} from './api';\n\nexport const calculator = {\n  add,\n  compare,\n  decrement,\n  increment,\n  integerDivide,\n  modulo,\n  multiply,\n  power,\n  subtract,\n  zero,\n};\n"],"names":["add","ComparisonOperator","augend","addend","compare","a","b","LT","GT","EQ","decrement","value","increment","integerDivide","dividend","divisor","Math","trunc","modulo","multiply","multiplicand","multiplier","power","base","exponent","subtract","minuend","subtrahend","zero","calculator"],"mappings":";uQAUaA,ICRFC,EDQED,EAA+B,SAACE,EAAQC,GACnD,OAAOD,EAASC,CAClB,GCTA,SAAWF,GACTA,EAAmBA,EAAuB,IAAK,GAAK,KACpDA,EAAmBA,EAAuB,GAAI,GAAK,KACnDA,EAAmBA,EAAuB,GAAI,GAAK,IACpD,CAJD,CAIGA,IAAuBA,EAAqB,CAAA,ICIlCG,IAAAA,EAAuD,SAACC,EAAGC,GACtE,OAAID,EAAIC,EACCL,EAAmBM,GAExBF,EAAIC,EACCL,EAAmBO,GAErBP,EAAmBQ,EAC5B,ECVaC,EAAoC,SAACC,GAChD,OAAOA,EAAQ,CACjB,ECFaC,EAAoC,SAACD,GAChD,OAAOA,EAAQ,CACjB,ECDaE,EAAyC,SAACC,EAAUC,GAC/D,OAAOC,KAAKC,MAAMH,EAAWC,EAC/B,ECFaG,EAAkC,SAACJ,EAAUC,GACxD,OAAOD,EAAWC,CACpB,ECFaI,EAAoC,SAACC,EAAcC,GAC9D,OAAOD,EAAeC,CACxB,ECFaC,EAAiC,SAACC,EAAMC,GACnD,OAAOD,KAAAA,IAAAA,EAAQC,EACjB,ECFaC,EAAoC,SAACC,EAASC,GACzD,OAAOD,EAAUC,CACnB,ECPO,SAASC,IACd,OAAO,CACT,CCMO,IAAMC,EAAa,CACxB7B,IAAAA,EACAI,QAAAA,EACAM,UAAAA,EACAE,UAAAA,EACAC,cAAAA,EACAK,OAAAA,EACAC,SAAAA,EACAG,MAAAA,EACAG,SAAAA,EACAG,KAAAA"}