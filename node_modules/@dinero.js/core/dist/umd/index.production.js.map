{"version":3,"file":"index.production.js","sources":["../../src/checks/messages.ts","../../src/types/Calculator.ts","../../src/helpers/assert.ts","../../src/utils/equal.ts","../../src/utils/lessThan.ts","../../src/utils/absolute.ts","../../src/utils/isArray.ts","../../src/utils/computeBase.ts","../../src/utils/greaterThan.ts","../../src/utils/greaterThanOrEqual.ts","../../src/utils/distribute.ts","../../src/utils/getAmountAndScale.ts","../../src/utils/isScaledAmount.ts","../../src/utils/isEven.ts","../../src/utils/isHalf.ts","../../src/utils/maximum.ts","../../src/utils/sign.ts","../../src/api/haveSameCurrency.ts","../../src/divide/down.ts","../../src/divide/halfUp.ts","../../src/divide/up.ts","../../src/api/transformScale.ts","../../src/api/normalizeScale.ts","../../src/api/haveSameAmount.ts","../../src/api/lessThanOrEqual.ts","../../src/utils/lessThanOrEqual.ts","../../src/api/minimum.ts","../../src/utils/minimum.ts","../../src/api/toUnits.ts","../../src/utils/getDivisors.ts","../../src/api/toDecimal.ts","../../src/api/convert.ts","../../src/helpers/createDinero.ts","../../src/api/equal.ts","../../src/divide/halfAwayFromZero.ts","../../src/divide/halfDown.ts","../../src/divide/halfEven.ts","../../src/divide/halfOdd.ts","../../src/divide/halfTowardsZero.ts","../../src/api/hasSubUnits.ts","../../src/api/isNegative.ts","../../src/api/isPositive.ts","../../src/api/isZero.ts","../../src/api/multiply.ts","../../src/api/add.ts","../../src/api/allocate.ts","../../src/api/compare.ts","../../src/utils/compare.ts","../../src/api/greaterThan.ts","../../src/api/greaterThanOrEqual.ts","../../src/api/lessThan.ts","../../src/api/maximum.ts","../../src/api/subtract.ts","../../src/api/toSnapshot.ts","../../src/api/trimScale.ts","../../src/utils/countTrailingZeros.ts"],"sourcesContent":["export const INVALID_AMOUNT_MESSAGE = 'Amount is invalid.';\nexport const INVALID_SCALE_MESSAGE = 'Scale is invalid.';\nexport const INVALID_RATIOS_MESSAGE = 'Ratios are invalid.';\nexport const UNEQUAL_SCALES_MESSAGE = 'Objects must have the same scale.';\nexport const UNEQUAL_CURRENCIES_MESSAGE =\n  'Objects must have the same currency.';\nexport const NON_DECIMAL_CURRENCY_MESSAGE = 'Currency is not decimal.';\n","/* eslint-disable functional/no-mixed-type */\nimport type { BinaryOperation, UnaryOperation } from '.';\n\nexport enum ComparisonOperator {\n  LT = -1,\n  EQ = 0,\n  GT = 1,\n}\n\nexport type Calculator<TInput> = {\n  readonly add: BinaryOperation<TInput>;\n  readonly compare: BinaryOperation<TInput, ComparisonOperator>;\n  readonly decrement: UnaryOperation<TInput>;\n  readonly integerDivide: BinaryOperation<TInput>;\n  readonly increment: UnaryOperation<TInput>;\n  readonly modulo: BinaryOperation<TInput>;\n  readonly multiply: BinaryOperation<TInput>;\n  readonly power: BinaryOperation<TInput>;\n  readonly subtract: BinaryOperation<TInput>;\n  readonly zero: () => TInput;\n};\n","/* eslint-disable functional/no-throw-statement, valid-jsdoc */\n/**\n * Assert a condition.\n *\n * @param condition - The condition to verify.\n * @param message - The error message to throw.\n *\n * @throws If the condition isn't met.\n */\nexport function assert(condition: boolean, message: string) {\n  if (!condition) {\n    throw new Error(`[Dinero.js] ${message}`);\n  }\n}\n","import { ComparisonOperator } from '../types';\nimport type { Calculator } from '../types';\n\ntype EqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns an equal function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The equal function.\n */\nexport function equal<TAmount>(calculator: EqualCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.EQ;\n  };\n}\n","import { ComparisonOperator } from '../types';\nimport type { Calculator } from '../types';\n\ntype LessThanCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a lessThan function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The lessThan function.\n */\nexport function lessThan<TAmount>(calculator: LessThanCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.LT;\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { lessThan } from './lessThan';\n\nexport function absolute<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const lessThanFn = lessThan(calculator);\n  const zero = calculator.zero();\n\n  return (input: TAmount) => {\n    if (equalFn(input, zero)) {\n      return zero;\n    }\n\n    if (lessThanFn(input, zero)) {\n      const minusOne = calculator.decrement(zero);\n\n      return calculator.multiply(minusOne, input);\n    }\n\n    return input;\n  };\n}\n","export function isArray<TType>(\n  maybeArray: TType | readonly TType[]\n): maybeArray is readonly TType[] {\n  return Array.isArray(maybeArray);\n}\n","import type { Calculator } from '../types';\n\nimport { isArray } from './isArray';\n\nexport function computeBase<TAmount>(calculator: Calculator<TAmount>) {\n  return (base: TAmount | readonly TAmount[]) => {\n    if (isArray(base)) {\n      return base.reduce((acc, curr) => calculator.multiply(acc, curr));\n    }\n\n    return base;\n  };\n}\n","import { ComparisonOperator } from '../types';\nimport type { Calculator } from '../types';\n\ntype GreaterThanCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a greaterThan function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The greaterThan function.\n */\nexport function greaterThan<TAmount>(\n  calculator: GreaterThanCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.GT;\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { greaterThan } from './greaterThan';\n\ntype GreaterThanOrEqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a greaterThanOrEqual function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The greaterThanOrEqual function.\n */\nexport function greaterThanOrEqual<TAmount>(\n  calculator: GreaterThanOrEqualCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return (\n      greaterThan(calculator)(subject, comparator) ||\n      equal(calculator)(subject, comparator)\n    );\n  };\n}\n","/* eslint-disable functional/no-let, functional/no-loop-statement, functional/immutable-data, functional/no-expression-statement */\n\nimport type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { greaterThan } from './greaterThan';\nimport { greaterThanOrEqual } from './greaterThanOrEqual';\nimport { lessThan } from './lessThan';\n\ntype DistributeCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a distribute function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The distribute function.\n */\nexport function distribute<TAmount>(calculator: DistributeCalculator<TAmount>) {\n  return (value: TAmount, ratios: readonly TAmount[]) => {\n    const equalFn = equal(calculator);\n    const greaterThanFn = greaterThan(calculator);\n    const lessThanFn = lessThan(calculator);\n    const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n\n    const zero = calculator.zero();\n    const one = calculator.increment(zero);\n\n    const total = ratios.reduce((a, b) => calculator.add(a, b), zero);\n\n    if (equalFn(total, zero)) {\n      return ratios;\n    }\n\n    let remainder = value;\n\n    const shares = ratios.map((ratio) => {\n      const share =\n        calculator.integerDivide(calculator.multiply(value, ratio), total) ||\n        zero;\n\n      remainder = calculator.subtract(remainder, share);\n\n      return share;\n    });\n\n    const isPositive = greaterThanOrEqualFn(value, zero);\n    const compare = isPositive ? greaterThanFn : lessThanFn;\n    const amount = isPositive ? one : calculator.decrement(zero);\n\n    let i = 0;\n\n    while (compare(remainder, zero)) {\n      if (!equalFn(ratios[i], zero)) {\n        shares[i] = calculator.add(shares[i], amount);\n        remainder = calculator.subtract(remainder, amount);\n      }\n\n      i++;\n    }\n\n    return shares;\n  };\n}\n","import type { ScaledAmount } from '../types';\n\nimport { isScaledAmount } from './isScaledAmount';\n\nexport function getAmountAndScale<TAmount>(\n  value: ScaledAmount<TAmount> | TAmount,\n  zero: TAmount\n) {\n  if (isScaledAmount(value)) {\n    return { amount: value.amount, scale: value?.scale ?? zero };\n  }\n\n  return { amount: value, scale: zero };\n}\n","import type { Rate, ScaledAmount } from '../types';\n\nexport function isScaledAmount<TAmount>(\n  amount: Rate<TAmount>\n): amount is ScaledAmount<TAmount> {\n  return (amount as ScaledAmount<TAmount>)?.hasOwnProperty('amount');\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from '.';\n\nexport function isEven<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const zero = calculator.zero();\n  const two = calculator.increment(calculator.increment(zero));\n\n  return (input: TAmount) => {\n    return equalFn(calculator.modulo(input, two), zero);\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal, absolute } from '.';\n\nexport function isHalf<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const absoluteFn = absolute(calculator);\n\n  return (input: TAmount, total: TAmount) => {\n    const remainder = absoluteFn(calculator.modulo(input, total));\n    const difference = calculator.subtract(total, remainder);\n\n    return equalFn(difference, remainder);\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { lessThan } from './lessThan';\n\ntype MaximumCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a maximum function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The maximum function.\n */\nexport function maximum<TAmount>(calculator: MaximumCalculator<TAmount>) {\n  const lessThanFn = lessThan(calculator);\n\n  return (values: readonly TAmount[]) => {\n    return values.reduce((acc, curr) => {\n      return lessThanFn(acc, curr) ? curr : acc;\n    });\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { lessThan } from './lessThan';\n\nexport function sign<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const lessThanFn = lessThan(calculator);\n  const zero = calculator.zero();\n\n  return (input: TAmount) => {\n    if (equalFn(input, zero)) {\n      return zero;\n    }\n\n    const one = calculator.increment(zero);\n    const minusOne = calculator.decrement(zero);\n\n    return lessThanFn(input, zero) ? minusOne : one;\n  };\n}\n","import type { Dinero } from '../types';\nimport { computeBase, equal } from '../utils';\n\nexport function haveSameCurrency<TAmount>(\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n) {\n  const [firstDinero, ...otherDineros] = dineroObjects;\n  const computeBaseFn = computeBase(firstDinero.calculator);\n\n  const { currency: comparator } = firstDinero.toJSON();\n  const equalFn = equal(firstDinero.calculator);\n  const comparatorBase = computeBaseFn(comparator.base);\n\n  return otherDineros.every((d) => {\n    const { currency: subject } = d.toJSON();\n    const subjectBase = computeBaseFn(subject.base);\n\n    return (\n      subject.code === comparator.code &&\n      equalFn(subjectBase, comparatorBase) &&\n      equalFn(subject.exponent, comparator.exponent)\n    );\n  });\n}\n","import type { DivideOperation } from '..';\nimport { equal, greaterThan } from '../utils';\n\n/**\n * Divide and round down.\n *\n * Rounding down happens whenever the quotient is not an integer.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const down: DivideOperation = (amount, factor, calculator) => {\n  const greaterThanFn = greaterThan(calculator);\n  const equalFn = equal(calculator);\n\n  const zero = calculator.zero();\n  const isPositive = greaterThanFn(amount, zero);\n  const quotient = calculator.integerDivide(amount, factor);\n  const remainder = calculator.modulo(amount, factor);\n  const isInteger = equalFn(remainder, zero);\n\n  if (isPositive || isInteger) {\n    return quotient;\n  }\n\n  return calculator.decrement(quotient);\n};\n","import type { DivideOperation } from '..';\nimport { absolute, greaterThan, isHalf } from '../utils';\n\nimport { down, up } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round up.\n *\n * Rounding up happens when:\n * - The quotient is half (e.g., -1.5, 1.5).\n * - The quotient is positive and greater than half (e.g., 1.6).\n * - The quotient is negative and less than half (e.g., -1.4).\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfUp: DivideOperation = (amount, factor, calculator) => {\n  const greaterThanFn = greaterThan(calculator);\n  const isHalfFn = isHalf(calculator);\n  const absoluteFn = absolute(calculator);\n\n  const zero = calculator.zero();\n  const remainder = absoluteFn(calculator.modulo(amount, factor));\n  const difference = calculator.subtract(factor, remainder);\n  const isLessThanHalf = greaterThanFn(difference, remainder);\n  const isPositive = greaterThanFn(amount, zero);\n\n  if (\n    isHalfFn(amount, factor) ||\n    (isPositive && !isLessThanHalf) ||\n    (!isPositive && isLessThanHalf)\n  ) {\n    return up(amount, factor, calculator);\n  }\n\n  return down(amount, factor, calculator);\n};\n","import type { DivideOperation } from '..';\nimport { equal, greaterThan } from '../utils';\n\n/**\n * Divide and round up.\n *\n * Rounding up happens whenever the quotient is not an integer.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const up: DivideOperation = (amount, factor, calculator) => {\n  const greaterThanFn = greaterThan(calculator);\n  const equalFn = equal(calculator);\n\n  const zero = calculator.zero();\n  const isPositive = greaterThanFn(amount, zero);\n  const quotient = calculator.integerDivide(amount, factor);\n  const remainder = calculator.modulo(amount, factor);\n  const isInteger = equalFn(remainder, zero);\n\n  if (!isInteger && isPositive) {\n    return calculator.increment(quotient);\n  }\n\n  return quotient;\n};\n","import { down } from '../divide';\nimport type { Calculator, Dinero, DivideOperation } from '../types';\nimport { computeBase, greaterThan } from '../utils';\n\nexport type TransformScaleParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  newScale: TAmount,\n  divide?: DivideOperation\n];\n\nexport function transformScale<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n  const computeBaseFn = computeBase(calculator);\n\n  return function transformScaleFn(\n    ...[dineroObject, newScale, divide = down]: TransformScaleParams<TAmount>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n\n    const isLarger = greaterThanFn(newScale, scale);\n    const operation = isLarger ? calculator.multiply : divide;\n    const [a, b] = isLarger ? [newScale, scale] : [scale, newScale];\n    const base = computeBaseFn(currency.base);\n\n    const factor = calculator.power(base, calculator.subtract(a, b));\n\n    return dineroObject.create({\n      amount: operation(amount, factor, calculator),\n      currency,\n      scale: newScale,\n    });\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { equal, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nexport type NormalizeScaleParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nexport function normalizeScale<TAmount>(calculator: Calculator<TAmount>) {\n  const maximumFn = maximum(calculator);\n  const convertScaleFn = transformScale(calculator);\n  const equalFn = equal(calculator);\n\n  return function _normalizeScale(\n    ...[dineroObjects]: NormalizeScaleParams<TAmount>\n  ) {\n    const highestScale = dineroObjects.reduce((highest, current) => {\n      const { scale } = current.toJSON();\n\n      return maximumFn([highest, scale]);\n    }, calculator.zero());\n\n    return dineroObjects.map((d) => {\n      const { scale } = d.toJSON();\n\n      return !equalFn(scale, highestScale)\n        ? convertScaleFn(d, highestScale)\n        : d;\n    });\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { equal } from '../utils';\n\nimport { normalizeScale } from './normalizeScale';\n\nexport type HaveSameAmountParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nexport function haveSameAmount<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const equalFn = equal(calculator);\n\n  return function _haveSameAmount(\n    ...[dineroObjects]: HaveSameAmountParams<TAmount>\n  ) {\n    const [firstDinero, ...otherDineros] = normalizeFn(dineroObjects);\n    const { amount: comparatorAmount } = firstDinero.toJSON();\n\n    return otherDineros.every((d) => {\n      const { amount: subjectAmount } = d.toJSON();\n\n      return equalFn(subjectAmount, comparatorAmount);\n    });\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { lessThanOrEqual as lte } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type LessThanOrEqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeLessThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanOrEqualFn = lte(calculator);\n\n  return function lessThanOrEqual(\n    ...[dineroObject, comparator]: LessThanOrEqualParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return lessThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeLessThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const lessThanOrEqualFn = unsafeLessThanOrEqual(calculator);\n\n  return function lessThanOrEqual(\n    ...[dineroObject, comparator]: LessThanOrEqualParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return lessThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { lessThan } from './lessThan';\n\ntype LessThanOrEqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a lessThanOrEqual function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The lessThanOrEqual function.\n */\nexport function lessThanOrEqual<TAmount>(\n  calculator: LessThanOrEqualCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return (\n      lessThan(calculator)(subject, comparator) ||\n      equal(calculator)(subject, comparator)\n    );\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { minimum as min } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type MinimumParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nfunction unsafeMinimum<TAmount>(calculator: Calculator<TAmount>) {\n  const minFn = min(calculator);\n\n  return function minimum(...[dineroObjects]: MinimumParams<TAmount>) {\n    const [firstDinero] = dineroObjects;\n    const { currency, scale } = firstDinero.toJSON();\n\n    const amount = minFn(\n      dineroObjects.map((subject) => {\n        const { amount: subjectAmount } = subject.toJSON();\n\n        return subjectAmount;\n      })\n    );\n\n    return firstDinero.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeMinimum<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const minFn = unsafeMinimum(calculator);\n\n  return function maximum(...[dineroObjects]: MinimumParams<TAmount>) {\n    const condition = haveSameCurrency(dineroObjects);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const normalizedDineroObjects = normalizeFn(dineroObjects);\n\n    return minFn(normalizedDineroObjects);\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { greaterThan } from './greaterThan';\n\ntype MinimumCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a minimum function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The minimum function.\n */\nexport function minimum<TAmount>(calculator: MinimumCalculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n\n  return (values: readonly TAmount[]) => {\n    return values.reduce((acc, curr) => {\n      return greaterThanFn(acc, curr) ? curr : acc;\n    });\n  };\n}\n","import type { Calculator, Dinero, Transformer } from '../types';\nimport { isArray, getDivisors } from '../utils';\n\nexport type ToUnitsParams<TAmount, TOutput> = readonly [\n  dineroObject: Dinero<TAmount>,\n  transformer?: Transformer<TAmount, TOutput, readonly TAmount[]>\n];\n\nexport function toUnits<TAmount, TOutput>(calculator: Calculator<TAmount>) {\n  const getDivisorsFn = getDivisors(calculator);\n\n  return function toUnitsFn(\n    ...[dineroObject, transformer]: ToUnitsParams<TAmount, TOutput>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const { power, integerDivide, modulo } = calculator;\n\n    const bases = isArray(currency.base) ? currency.base : [currency.base];\n    const divisors = getDivisorsFn(bases.map((base) => power(base, scale)));\n    const value = divisors.reduce<readonly TAmount[]>(\n      (amounts, divisor, index) => {\n        const amountLeft = amounts[index];\n\n        const quotient = integerDivide(amountLeft, divisor);\n        const remainder = modulo(amountLeft, divisor);\n\n        return [...amounts.filter((_, i) => i !== index), quotient, remainder];\n      },\n      [amount]\n    );\n\n    if (!transformer) {\n      return value;\n    }\n\n    return transformer({ value, currency });\n  };\n}\n","import type { Calculator } from '../types';\n\nexport function getDivisors<TAmount>(calculator: Calculator<TAmount>) {\n  const { multiply } = calculator;\n\n  return (bases: readonly TAmount[]) => {\n    return bases.reduce<readonly TAmount[]>((divisors, _, i) => {\n      const divisor = bases.slice(i).reduce((acc, curr) => multiply(acc, curr));\n\n      return [...divisors, divisor];\n    }, []);\n  };\n}\n","import { NON_DECIMAL_CURRENCY_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero, Formatter, Transformer } from '../types';\nimport { absolute, computeBase, equal, isArray, lessThan } from '../utils';\n\nimport { toUnits } from './toUnits';\n\nexport type ToDecimalParams<TAmount, TOutput> = readonly [\n  dineroObject: Dinero<TAmount>,\n  transformer?: Transformer<TAmount, TOutput, string>\n];\n\nexport function toDecimal<TAmount, TOutput>(calculator: Calculator<TAmount>) {\n  const toUnitsFn = toUnits<TAmount, readonly TAmount[]>(calculator);\n  const computeBaseFn = computeBase(calculator);\n  const equalFn = equal(calculator);\n\n  return function toDecimalFn(\n    ...[dineroObject, transformer]: ToDecimalParams<TAmount, TOutput>\n  ) {\n    const { currency, scale } = dineroObject.toJSON();\n\n    const base = computeBaseFn(currency.base);\n    const zero = calculator.zero();\n    const ten = new Array(10).fill(null).reduce(calculator.increment, zero);\n\n    const isMultiBase = isArray(currency.base);\n    const isBaseTen = equalFn(calculator.modulo(base, ten), zero);\n    const isDecimal = !isMultiBase && isBaseTen;\n\n    // eslint-disable-next-line functional/no-expression-statement\n    assert(isDecimal, NON_DECIMAL_CURRENCY_MESSAGE);\n\n    const units = toUnitsFn(dineroObject);\n\n    const getDecimalFn = getDecimal(calculator, dineroObject.formatter);\n    const value = getDecimalFn(units, scale);\n\n    if (!transformer) {\n      return value;\n    }\n\n    return transformer({ value, currency });\n  };\n}\n\nfunction getDecimal<TAmount>(\n  calculator: Calculator<TAmount>,\n  formatter: Formatter<TAmount>\n) {\n  const absoluteFn = absolute(calculator);\n  const equalFn = equal(calculator);\n  const lessThanFn = lessThan(calculator);\n  const zero = calculator.zero();\n\n  return (units: readonly TAmount[], scale: TAmount) => {\n    const whole = formatter.toString(units[0]);\n    const fractional = formatter.toString(absoluteFn(units[1]));\n\n    const scaleNumber = formatter.toNumber(scale);\n    const decimal = `${whole}.${fractional.padStart(scaleNumber, '0')}`;\n\n    const leadsWithZero = equalFn(units[0], zero);\n    const isNegative = lessThanFn(units[1], zero);\n\n    // A leading negative zero is a special case because the `toString`\n    // formatter won't preserve its negative sign (since 0 === -0).\n    return leadsWithZero && isNegative ? `-${decimal}` : decimal;\n  };\n}\n","import type { Currency } from '@dinero.js/currencies';\n\nimport type { Calculator, Dinero, Rates } from '../types';\nimport { getAmountAndScale, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nexport type ConvertParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  newCurrency: Currency<TAmount>,\n  rates: Rates<TAmount>\n];\n\nexport function convert<TAmount>(calculator: Calculator<TAmount>) {\n  const convertScaleFn = transformScale(calculator);\n  const maximumFn = maximum(calculator);\n  const zero = calculator.zero();\n\n  return function convertFn(\n    ...[dineroObject, newCurrency, rates]: ConvertParams<TAmount>\n  ) {\n    const rate = rates[newCurrency.code];\n    const { amount, scale } = dineroObject.toJSON();\n    const { amount: rateAmount, scale: rateScale } = getAmountAndScale(\n      rate,\n      zero\n    );\n\n    const newScale = calculator.add(scale, rateScale);\n\n    return convertScaleFn(\n      dineroObject.create({\n        amount: calculator.multiply(amount, rateAmount),\n        currency: newCurrency,\n        scale: newScale,\n      }),\n      maximumFn([newScale, newCurrency.exponent])\n    );\n  };\n}\n","/* eslint-disable functional/no-mixed-type, functional/no-return-void, functional/no-expression-statement */\nimport type { Calculator, Dinero, DineroOptions, Formatter } from '../types';\n\nexport type CreateDineroOptions<TAmount> = {\n  readonly calculator: Calculator<TAmount>;\n  readonly formatter?: Formatter<TAmount>;\n  readonly onCreate?: (options: DineroOptions<TAmount>) => void;\n};\n\nexport function createDinero<TAmount>({\n  calculator,\n  onCreate,\n  formatter = {\n    toNumber: Number,\n    toString: String,\n  },\n}: CreateDineroOptions<TAmount>) {\n  return function dinero({\n    amount,\n    currency: { code, base, exponent },\n    scale = exponent,\n  }: DineroOptions<TAmount>): Dinero<TAmount> {\n    const currency = { code, base, exponent };\n\n    onCreate?.({ amount, currency, scale });\n\n    return {\n      calculator,\n      formatter,\n      create: dinero,\n      toJSON() {\n        return {\n          amount,\n          currency,\n          scale,\n        };\n      },\n    };\n  };\n}\n","import type { Calculator, Dinero } from '../types';\n\nimport { haveSameAmount } from './haveSameAmount';\nimport { haveSameCurrency } from './haveSameCurrency';\n\nexport type EqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nexport function equal<TAmount>(calculator: Calculator<TAmount>) {\n  return function _equal(...[dineroObject, comparator]: EqualParams<TAmount>) {\n    return (\n      haveSameAmount(calculator)([dineroObject, comparator]) &&\n      haveSameCurrency([dineroObject, comparator])\n    );\n  };\n}\n","import type { DivideOperation } from '..';\nimport { sign, isHalf, absolute } from '../utils';\n\nimport { halfUp, up } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round away from zero.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfAwayFromZero: DivideOperation = (\n  amount,\n  factor,\n  calculator\n) => {\n  const signFn = sign(calculator);\n  const isHalfFn = isHalf(calculator);\n  const absoluteFn = absolute(calculator);\n\n  if (!isHalfFn(amount, factor)) {\n    return halfUp(amount, factor, calculator);\n  }\n\n  return calculator.multiply(\n    signFn(amount),\n    up(absoluteFn(amount), factor, calculator)\n  );\n};\n","import type { DivideOperation } from '..';\nimport { isHalf } from '../utils';\n\nimport { down, halfUp } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round down.\n *\n * Rounding down happens when:\n * - The quotient is half (e.g., -1.5, 1.5).\n * - The quotient is positive and less than half (e.g., 1.4).\n * - The quotient is negative and greater than half (e.g., -1.6).\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfDown: DivideOperation = (amount, factor, calculator) => {\n  const isHalfFn = isHalf(calculator);\n\n  if (isHalfFn(amount, factor)) {\n    return down(amount, factor, calculator);\n  }\n\n  return halfUp(amount, factor, calculator);\n};\n","import type { DivideOperation } from '..';\nimport { isEven, isHalf } from '../utils';\n\nimport { halfUp } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round to the nearest even integer.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfEven: DivideOperation = (amount, factor, calculator) => {\n  const isEvenFn = isEven(calculator);\n  const isHalfFn = isHalf(calculator);\n\n  const rounded = halfUp(amount, factor, calculator);\n\n  if (!isHalfFn(amount, factor)) {\n    return rounded;\n  }\n\n  return isEvenFn(rounded) ? rounded : calculator.decrement(rounded);\n};\n","import type { DivideOperation } from '..';\nimport { isEven, isHalf } from '../utils';\n\nimport { halfUp } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round to the nearest odd integer.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfOdd: DivideOperation = (amount, factor, calculator) => {\n  const isEvenFn = isEven(calculator);\n  const isHalfFn = isHalf(calculator);\n\n  const rounded = halfUp(amount, factor, calculator);\n\n  if (!isHalfFn(amount, factor)) {\n    return rounded;\n  }\n\n  return isEvenFn(rounded) ? calculator.decrement(rounded) : rounded;\n};\n","import type { DivideOperation } from '..';\nimport { sign, isHalf, absolute } from '../utils';\n\nimport { halfUp, down } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round towards zero.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfTowardsZero: DivideOperation = (\n  amount,\n  factor,\n  calculator\n) => {\n  const signFn = sign(calculator);\n  const isHalfFn = isHalf(calculator);\n  const absoluteFn = absolute(calculator);\n\n  if (!isHalfFn(amount, factor)) {\n    return halfUp(amount, factor, calculator);\n  }\n\n  return calculator.multiply(\n    signFn(amount),\n    down(absoluteFn(amount), factor, calculator)\n  );\n};\n","import type { Calculator, Dinero } from '../types';\nimport { computeBase, equal } from '../utils';\n\nexport type HasSubUnitsParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function hasSubUnits<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const computeBaseFn = computeBase(calculator);\n\n  return function _hasSubUnits(...[dineroObject]: HasSubUnitsParams<TAmount>) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const base = computeBaseFn(currency.base);\n\n    return !equalFn(\n      calculator.modulo(amount, calculator.power(base, scale)),\n      calculator.zero()\n    );\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { lessThan } from '../utils';\n\nexport type IsNegativeParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function isNegative<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanFn = lessThan(calculator);\n\n  return function _isNegative(...[dineroObject]: IsNegativeParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return lessThanFn(amount, calculator.zero());\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { greaterThan } from '../utils';\n\nexport type IsPositiveParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function isPositive<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n\n  return function _isPositive(...[dineroObject]: IsPositiveParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return greaterThanFn(amount, calculator.zero());\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { equal } from '../utils';\n\nexport type IsZeroParams<TAmount> = readonly [dineroObject: Dinero<TAmount>];\n\nexport function isZero<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n\n  return function _isZero(...[dineroObject]: IsZeroParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return equalFn(amount, calculator.zero());\n  };\n}\n","import type { Calculator, Dinero, ScaledAmount } from '../types';\nimport { getAmountAndScale } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nexport type MultiplyParams<TAmount> = readonly [\n  multiplicand: Dinero<TAmount>,\n  multiplier: ScaledAmount<TAmount> | TAmount\n];\n\nexport function multiply<TAmount>(calculator: Calculator<TAmount>) {\n  const convertScaleFn = transformScale(calculator);\n  const zero = calculator.zero();\n\n  return function multiplyFn(\n    ...[multiplicand, multiplier]: MultiplyParams<TAmount>\n  ) {\n    const { amount, currency, scale } = multiplicand.toJSON();\n    const { amount: multiplierAmount, scale: multiplierScale } =\n      getAmountAndScale(multiplier, zero);\n\n    const newScale = calculator.add(scale, multiplierScale);\n\n    return convertScaleFn(\n      multiplicand.create({\n        amount: calculator.multiply(amount, multiplierAmount),\n        currency,\n        scale: newScale,\n      }),\n      newScale\n    );\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type AddParams<TAmount> = readonly [\n  augend: Dinero<TAmount>,\n  addend: Dinero<TAmount>\n];\n\nfunction unsafeAdd<TAmount>(calculator: Calculator<TAmount>) {\n  return function add(...[augend, addend]: AddParams<TAmount>) {\n    const { amount: augendAmount, currency, scale } = augend.toJSON();\n    const { amount: addendAmount } = addend.toJSON();\n\n    const amount = calculator.add(augendAmount, addendAmount);\n\n    return augend.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeAdd<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const addFn = unsafeAdd(calculator);\n\n  return function add(...[augend, addend]: AddParams<TAmount>) {\n    const condition = haveSameCurrency([augend, addend]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [newAugend, newAddend] = normalizeFn([augend, addend]);\n\n    return addFn(newAugend, newAddend);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { INVALID_RATIOS_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero, ScaledAmount } from '../types';\nimport {\n  distribute,\n  equal,\n  getAmountAndScale,\n  greaterThan,\n  greaterThanOrEqual,\n  maximum,\n} from '../utils';\n\nimport { transformScale } from './transformScale';\n\ntype UnsafeAllocateParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  ratios: ReadonlyArray<ScaledAmount<TAmount>>\n];\n\nfunction unsafeAllocate<TAmount>(calculator: Calculator<TAmount>) {\n  return function allocate(\n    ...[dineroObject, ratios]: UnsafeAllocateParams<TAmount>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const distributeFn = distribute(calculator);\n    const shares = distributeFn(\n      amount,\n      ratios.map((ratio) => ratio.amount)\n    );\n\n    return shares.map((share) => {\n      return dineroObject.create({\n        amount: share,\n        currency,\n        scale,\n      });\n    });\n  };\n}\n\nexport type AllocateParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  ratios: ReadonlyArray<ScaledAmount<TAmount> | TAmount>\n];\n\nexport function safeAllocate<TAmount>(calculator: Calculator<TAmount>) {\n  const allocateFn = unsafeAllocate(calculator);\n  const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n  const greaterThanFn = greaterThan(calculator);\n  const convertScaleFn = transformScale(calculator);\n  const maximumFn = maximum(calculator);\n  const equalFn = equal(calculator);\n  const zero = calculator.zero();\n  const ten = new Array(10).fill(null).reduce(calculator.increment, zero);\n\n  return function allocate(...[dineroObject, ratios]: AllocateParams<TAmount>) {\n    const hasRatios = ratios.length > 0;\n    const scaledRatios = ratios.map((ratio) => getAmountAndScale(ratio, zero));\n    const highestRatioScale = hasRatios\n      ? maximumFn(scaledRatios.map(({ scale }) => scale))\n      : zero;\n    const normalizedRatios = scaledRatios.map(({ amount, scale }) => {\n      const factor = equalFn(scale, highestRatioScale)\n        ? zero\n        : calculator.subtract(highestRatioScale, scale);\n\n      return {\n        amount: calculator.multiply(amount, calculator.power(ten, factor)),\n        scale,\n      };\n    });\n    const hasOnlyPositiveRatios = normalizedRatios.every(({ amount }) =>\n      greaterThanOrEqualFn(amount, zero)\n    );\n    const hasOneNonZeroRatio = normalizedRatios.some(({ amount }) =>\n      greaterThanFn(amount, zero)\n    );\n\n    const condition = hasRatios && hasOnlyPositiveRatios && hasOneNonZeroRatio;\n    assert(condition, INVALID_RATIOS_MESSAGE);\n\n    const { scale } = dineroObject.toJSON();\n    const newScale = calculator.add(scale, highestRatioScale);\n\n    return allocateFn(convertScaleFn(dineroObject, newScale), normalizedRatios);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { compare as cmp } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type CompareParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeCompare<TAmount>(calculator: Calculator<TAmount>) {\n  const compareFn = cmp(calculator);\n\n  return function compare(\n    ...[dineroObject, comparator]: CompareParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return compareFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeCompare<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const compareFn = unsafeCompare(calculator);\n\n  return function compare(\n    ...[dineroObject, comparator]: CompareParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return compareFn(subjectAmount, comparatorAmount);\n  };\n}\n","import type { Calculator } from '../types';\n\ntype ComparisonCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a compare function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The compare function.\n */\nexport function compare<TAmount>(calculator: ComparisonCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { greaterThan as gt } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type GreaterThanParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeGreaterThan<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = gt(calculator);\n\n  return function greaterThan(\n    ...[dineroObject, comparator]: GreaterThanParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return greaterThanFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeGreaterThan<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const greaterThanFn = unsafeGreaterThan(calculator);\n\n  return function greaterThan(\n    ...[dineroObject, comparator]: GreaterThanParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return greaterThanFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { greaterThanOrEqual as gte } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type GreaterThanOrEqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeGreaterThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanOrEqualFn = gte(calculator);\n\n  return function greaterThanOrEqual(\n    ...[dineroObject, comparator]: GreaterThanOrEqualParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return greaterThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeGreaterThanOrEqual<TAmount>(\n  calculator: Calculator<TAmount>\n) {\n  const normalizeFn = normalizeScale(calculator);\n  const greaterThanOrEqualFn = unsafeGreaterThanOrEqual(calculator);\n\n  return function greaterThanOrEqual(\n    ...[dineroObject, comparator]: GreaterThanOrEqualParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return greaterThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { lessThan as lt } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type LessThanParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeLessThan<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanFn = lt(calculator);\n\n  return function lessThan(\n    ...[dineroObject, comparator]: LessThanParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return lessThanFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeLessThan<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const lessThanFn = unsafeLessThan(calculator);\n\n  return function lessThan(\n    ...[dineroObject, comparator]: LessThanParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return lessThanFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { maximum as max } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type MaximumParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nfunction unsafeMaximum<TAmount>(calculator: Calculator<TAmount>) {\n  const maxFn = max(calculator);\n\n  return function maximum(...[dineroObjects]: MaximumParams<TAmount>) {\n    const [firstDinero] = dineroObjects;\n    const { currency, scale } = firstDinero.toJSON();\n\n    const amount = maxFn(\n      dineroObjects.map((subject) => {\n        const { amount: subjectAmount } = subject.toJSON();\n\n        return subjectAmount;\n      })\n    );\n\n    return firstDinero.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeMaximum<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const maxFn = unsafeMaximum(calculator);\n\n  return function maximum(...[dineroObjects]: MaximumParams<TAmount>) {\n    const condition = haveSameCurrency(dineroObjects);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const normalizedDineroObjects = normalizeFn(dineroObjects);\n\n    return maxFn(normalizedDineroObjects);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type SubtractParams<TAmount> = readonly [\n  minuend: Dinero<TAmount>,\n  subtrahend: Dinero<TAmount>\n];\n\nfunction unsafeSubtract<TAmount>(calculator: Calculator<TAmount>) {\n  return function subtract(...[minuend, subtrahend]: SubtractParams<TAmount>) {\n    const { amount: minuendAmount, currency, scale } = minuend.toJSON();\n    const { amount: subtrahendAmount } = subtrahend.toJSON();\n\n    const amount = calculator.subtract(minuendAmount, subtrahendAmount);\n\n    return minuend.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeSubtract<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const subtractFn = unsafeSubtract(calculator);\n\n  return function subtract(...[minuend, subtrahend]: SubtractParams<TAmount>) {\n    const condition = haveSameCurrency([minuend, subtrahend]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [newMinuend, newSubtrahend] = normalizeFn([minuend, subtrahend]);\n\n    return subtractFn(newMinuend, newSubtrahend);\n  };\n}\n","import type { Dinero } from '../types';\n\nexport function toSnapshot<TAmount>(dineroObject: Dinero<TAmount>) {\n  return dineroObject.toJSON();\n}\n","import type { Calculator, Dinero } from '../types';\nimport { computeBase, countTrailingZeros, equal, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nexport type TrimScaleParams<TAmount> = readonly [dineroObject: Dinero<TAmount>];\n\nexport function trimScale<TAmount>(calculator: Calculator<TAmount>) {\n  const countTrailingZerosFn = countTrailingZeros(calculator);\n  const equalFn = equal(calculator);\n  const maximumFn = maximum(calculator);\n  const transformScaleFn = transformScale(calculator);\n  const computeBaseFn = computeBase(calculator);\n\n  return function trimScaleFn(...[dineroObject]: TrimScaleParams<TAmount>) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const base = computeBaseFn(currency.base);\n\n    const trailingZerosLength = countTrailingZerosFn(amount, base);\n    const difference = calculator.subtract(scale, trailingZerosLength);\n    const newScale = maximumFn([difference, currency.exponent]);\n\n    if (equalFn(newScale, scale)) {\n      return dineroObject;\n    }\n\n    return transformScaleFn(dineroObject, newScale);\n  };\n}\n","/* eslint-disable functional/no-let, functional/no-loop-statement, functional/no-expression-statement */\nimport type { Calculator } from '../types';\n\nimport { equal } from './equal';\n\ntype CountTrailingZerosCalculator<TAmount> = Calculator<TAmount>;\n\nexport function countTrailingZeros<TAmount>(\n  calculator: CountTrailingZerosCalculator<TAmount>\n) {\n  const equalFn = equal(calculator);\n\n  return (input: TAmount, base: TAmount) => {\n    const zero = calculator.zero();\n\n    if (equalFn(zero, input)) {\n      return calculator.zero();\n    }\n\n    let i = zero;\n    let temp = input;\n\n    while (equalFn(calculator.modulo(temp, base), zero)) {\n      temp = calculator.integerDivide(temp, base);\n      i = calculator.increment(i);\n    }\n\n    return i;\n  };\n}\n"],"names":["INVALID_AMOUNT_MESSAGE","ComparisonOperator","INVALID_RATIOS_MESSAGE","UNEQUAL_CURRENCIES_MESSAGE","NON_DECIMAL_CURRENCY_MESSAGE","assert","condition","message","Error","equal","calculator","subject","comparator","compare","EQ","lessThan","LT","absolute","equalFn","lessThanFn","zero","input","minusOne","decrement","multiply","isArray","maybeArray","Array","computeBase","base","reduce","acc","curr","greaterThan","GT","greaterThanOrEqual","distribute","value","ratios","greaterThanFn","greaterThanOrEqualFn","one","increment","total","a","b","add","remainder","shares","map","ratio","share","integerDivide","subtract","isPositive","amount","i","getAmountAndScale","_value$scale","hasOwnProperty","scale","isEven","two","modulo","isHalf","absoluteFn","difference","maximum","values","sign","haveSameCurrency","dineroObjects","_dineroObjects","_toArray","firstDinero","otherDineros","slice","computeBaseFn","toJSON","currency","comparatorBase","every","d","subjectBase","code","exponent","exports","down","factor","quotient","isInteger","halfUp","isHalfFn","isLessThanHalf","up","transformScale","_len","arguments","length","_ref","_key","dineroObject","newScale","_ref$","divide","isLarger","operation","_ref2","_ref3","_slicedToArray","power","create","normalizeScale","maximumFn","convertScaleFn","highestScale","highest","current","haveSameAmount","normalizeFn","_normalizeFn2","_normalizeFn","comparatorAmount","subjectAmount","unsafeLessThanOrEqual","lessThanOrEqualFn","lte","_dineroObjects$map","_dineroObjects$map2","unsafeMinimum","minFn","min","toUnits","getDivisorsFn","bases","divisors","_","divisor","getDivisors","transformer","amounts","index","amountLeft","concat","_toConsumableArray","filter","getDecimal","formatter","units","whole","toString","fractional","scaleNumber","toNumber","decimal","padStart","leadsWithZero","isNegative","newCurrency","rates","rate","_getAmountAndScale","rateAmount","rateScale","onCreate","_ref$formatter","Number","String","dinero","_ref2$currency","_ref2$scale","signFn","isEvenFn","rounded","multiplicand","multiplier","multiplierAmount","multiplierScale","addFn","augend","addend","augendAmount","addendAmount","unsafeAdd","_len2","_key2","newAugend","newAddend","allocateFn","distributeFn","unsafeAllocate","ten","fill","hasRatios","scaledRatios","highestRatioScale","normalizedRatios","_ref4","hasOnlyPositiveRatios","_ref5","hasOneNonZeroRatio","some","_ref6","compareFn","cmp","unsafeCompare","gt","unsafeGreaterThan","gte","unsafeGreaterThanOrEqual","lt","unsafeLessThan","maxFn","max","unsafeMaximum","normalizedDineroObjects","subtractFn","minuend","subtrahend","minuendAmount","subtrahendAmount","unsafeSubtract","newMinuend","newSubtrahend","toUnitsFn","isMultiBase","isBaseTen","isDecimal","getDecimalFn","countTrailingZerosFn","temp","countTrailingZeros","transformScaleFn","trailingZerosLength"],"mappings":"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"}