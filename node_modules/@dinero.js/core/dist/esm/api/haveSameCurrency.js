function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { computeBase, equal } from '../utils';
export function haveSameCurrency(dineroObjects) {
  var _dineroObjects = _toArray(dineroObjects),
    firstDinero = _dineroObjects[0],
    otherDineros = _dineroObjects.slice(1);
  var computeBaseFn = computeBase(firstDinero.calculator);
  var _firstDinero$toJSON = firstDinero.toJSON(),
    comparator = _firstDinero$toJSON.currency;
  var equalFn = equal(firstDinero.calculator);
  var comparatorBase = computeBaseFn(comparator.base);
  return otherDineros.every(function (d) {
    var _d$toJSON = d.toJSON(),
      subject = _d$toJSON.currency;
    var subjectBase = computeBaseFn(subject.base);
    return subject.code === comparator.code && equalFn(subjectBase, comparatorBase) && equalFn(subject.exponent, comparator.exponent);
  });
}