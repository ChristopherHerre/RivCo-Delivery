{"version":3,"file":"index.development.js","sources":["../../src/checks/messages.ts","../../src/helpers/assert.ts","../../src/helpers/createDinero.ts","../../src/types/Calculator.ts","../../src/utils/equal.ts","../../src/utils/lessThan.ts","../../src/utils/absolute.ts","../../src/utils/compare.ts","../../src/utils/isArray.ts","../../src/utils/computeBase.ts","../../src/utils/countTrailingZeros.ts","../../src/utils/greaterThan.ts","../../src/utils/greaterThanOrEqual.ts","../../src/utils/distribute.ts","../../src/utils/isScaledAmount.ts","../../src/utils/getAmountAndScale.ts","../../src/utils/getDivisors.ts","../../src/utils/isEven.ts","../../src/utils/isHalf.ts","../../src/utils/lessThanOrEqual.ts","../../src/utils/maximum.ts","../../src/utils/minimum.ts","../../src/utils/sign.ts","../../src/api/haveSameCurrency.ts","../../src/divide/down.ts","../../src/divide/halfAwayFromZero.ts","../../src/divide/halfDown.ts","../../src/divide/halfEven.ts","../../src/divide/halfOdd.ts","../../src/divide/halfTowardsZero.ts","../../src/divide/halfUp.ts","../../src/divide/up.ts","../../src/api/transformScale.ts","../../src/api/normalizeScale.ts","../../src/api/add.ts","../../src/api/allocate.ts","../../src/api/compare.ts","../../src/api/convert.ts","../../src/api/haveSameAmount.ts","../../src/api/equal.ts","../../src/api/greaterThan.ts","../../src/api/greaterThanOrEqual.ts","../../src/api/hasSubUnits.ts","../../src/api/isNegative.ts","../../src/api/isPositive.ts","../../src/api/isZero.ts","../../src/api/lessThan.ts","../../src/api/lessThanOrEqual.ts","../../src/api/maximum.ts","../../src/api/minimum.ts","../../src/api/multiply.ts","../../src/api/subtract.ts","../../src/api/toUnits.ts","../../src/api/toDecimal.ts","../../src/api/toSnapshot.ts","../../src/api/trimScale.ts"],"sourcesContent":["export const INVALID_AMOUNT_MESSAGE = 'Amount is invalid.';\nexport const INVALID_SCALE_MESSAGE = 'Scale is invalid.';\nexport const INVALID_RATIOS_MESSAGE = 'Ratios are invalid.';\nexport const UNEQUAL_SCALES_MESSAGE = 'Objects must have the same scale.';\nexport const UNEQUAL_CURRENCIES_MESSAGE =\n  'Objects must have the same currency.';\nexport const NON_DECIMAL_CURRENCY_MESSAGE = 'Currency is not decimal.';\n","/* eslint-disable functional/no-throw-statement, valid-jsdoc */\n/**\n * Assert a condition.\n *\n * @param condition - The condition to verify.\n * @param message - The error message to throw.\n *\n * @throws If the condition isn't met.\n */\nexport function assert(condition: boolean, message: string) {\n  if (!condition) {\n    throw new Error(`[Dinero.js] ${message}`);\n  }\n}\n","/* eslint-disable functional/no-mixed-type, functional/no-return-void, functional/no-expression-statement */\nimport type { Calculator, Dinero, DineroOptions, Formatter } from '../types';\n\nexport type CreateDineroOptions<TAmount> = {\n  readonly calculator: Calculator<TAmount>;\n  readonly formatter?: Formatter<TAmount>;\n  readonly onCreate?: (options: DineroOptions<TAmount>) => void;\n};\n\nexport function createDinero<TAmount>({\n  calculator,\n  onCreate,\n  formatter = {\n    toNumber: Number,\n    toString: String,\n  },\n}: CreateDineroOptions<TAmount>) {\n  return function dinero({\n    amount,\n    currency: { code, base, exponent },\n    scale = exponent,\n  }: DineroOptions<TAmount>): Dinero<TAmount> {\n    const currency = { code, base, exponent };\n\n    onCreate?.({ amount, currency, scale });\n\n    return {\n      calculator,\n      formatter,\n      create: dinero,\n      toJSON() {\n        return {\n          amount,\n          currency,\n          scale,\n        };\n      },\n    };\n  };\n}\n","/* eslint-disable functional/no-mixed-type */\nimport type { BinaryOperation, UnaryOperation } from '.';\n\nexport enum ComparisonOperator {\n  LT = -1,\n  EQ = 0,\n  GT = 1,\n}\n\nexport type Calculator<TInput> = {\n  readonly add: BinaryOperation<TInput>;\n  readonly compare: BinaryOperation<TInput, ComparisonOperator>;\n  readonly decrement: UnaryOperation<TInput>;\n  readonly integerDivide: BinaryOperation<TInput>;\n  readonly increment: UnaryOperation<TInput>;\n  readonly modulo: BinaryOperation<TInput>;\n  readonly multiply: BinaryOperation<TInput>;\n  readonly power: BinaryOperation<TInput>;\n  readonly subtract: BinaryOperation<TInput>;\n  readonly zero: () => TInput;\n};\n","import { ComparisonOperator } from '../types';\nimport type { Calculator } from '../types';\n\ntype EqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns an equal function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The equal function.\n */\nexport function equal<TAmount>(calculator: EqualCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.EQ;\n  };\n}\n","import { ComparisonOperator } from '../types';\nimport type { Calculator } from '../types';\n\ntype LessThanCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a lessThan function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The lessThan function.\n */\nexport function lessThan<TAmount>(calculator: LessThanCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.LT;\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { lessThan } from './lessThan';\n\nexport function absolute<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const lessThanFn = lessThan(calculator);\n  const zero = calculator.zero();\n\n  return (input: TAmount) => {\n    if (equalFn(input, zero)) {\n      return zero;\n    }\n\n    if (lessThanFn(input, zero)) {\n      const minusOne = calculator.decrement(zero);\n\n      return calculator.multiply(minusOne, input);\n    }\n\n    return input;\n  };\n}\n","import type { Calculator } from '../types';\n\ntype ComparisonCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a compare function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The compare function.\n */\nexport function compare<TAmount>(calculator: ComparisonCalculator<TAmount>) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator);\n  };\n}\n","export function isArray<TType>(\n  maybeArray: TType | readonly TType[]\n): maybeArray is readonly TType[] {\n  return Array.isArray(maybeArray);\n}\n","import type { Calculator } from '../types';\n\nimport { isArray } from './isArray';\n\nexport function computeBase<TAmount>(calculator: Calculator<TAmount>) {\n  return (base: TAmount | readonly TAmount[]) => {\n    if (isArray(base)) {\n      return base.reduce((acc, curr) => calculator.multiply(acc, curr));\n    }\n\n    return base;\n  };\n}\n","/* eslint-disable functional/no-let, functional/no-loop-statement, functional/no-expression-statement */\nimport type { Calculator } from '../types';\n\nimport { equal } from './equal';\n\ntype CountTrailingZerosCalculator<TAmount> = Calculator<TAmount>;\n\nexport function countTrailingZeros<TAmount>(\n  calculator: CountTrailingZerosCalculator<TAmount>\n) {\n  const equalFn = equal(calculator);\n\n  return (input: TAmount, base: TAmount) => {\n    const zero = calculator.zero();\n\n    if (equalFn(zero, input)) {\n      return calculator.zero();\n    }\n\n    let i = zero;\n    let temp = input;\n\n    while (equalFn(calculator.modulo(temp, base), zero)) {\n      temp = calculator.integerDivide(temp, base);\n      i = calculator.increment(i);\n    }\n\n    return i;\n  };\n}\n","import { ComparisonOperator } from '../types';\nimport type { Calculator } from '../types';\n\ntype GreaterThanCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a greaterThan function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The greaterThan function.\n */\nexport function greaterThan<TAmount>(\n  calculator: GreaterThanCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return calculator.compare(subject, comparator) === ComparisonOperator.GT;\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { greaterThan } from './greaterThan';\n\ntype GreaterThanOrEqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a greaterThanOrEqual function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The greaterThanOrEqual function.\n */\nexport function greaterThanOrEqual<TAmount>(\n  calculator: GreaterThanOrEqualCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return (\n      greaterThan(calculator)(subject, comparator) ||\n      equal(calculator)(subject, comparator)\n    );\n  };\n}\n","/* eslint-disable functional/no-let, functional/no-loop-statement, functional/immutable-data, functional/no-expression-statement */\n\nimport type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { greaterThan } from './greaterThan';\nimport { greaterThanOrEqual } from './greaterThanOrEqual';\nimport { lessThan } from './lessThan';\n\ntype DistributeCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a distribute function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The distribute function.\n */\nexport function distribute<TAmount>(calculator: DistributeCalculator<TAmount>) {\n  return (value: TAmount, ratios: readonly TAmount[]) => {\n    const equalFn = equal(calculator);\n    const greaterThanFn = greaterThan(calculator);\n    const lessThanFn = lessThan(calculator);\n    const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n\n    const zero = calculator.zero();\n    const one = calculator.increment(zero);\n\n    const total = ratios.reduce((a, b) => calculator.add(a, b), zero);\n\n    if (equalFn(total, zero)) {\n      return ratios;\n    }\n\n    let remainder = value;\n\n    const shares = ratios.map((ratio) => {\n      const share =\n        calculator.integerDivide(calculator.multiply(value, ratio), total) ||\n        zero;\n\n      remainder = calculator.subtract(remainder, share);\n\n      return share;\n    });\n\n    const isPositive = greaterThanOrEqualFn(value, zero);\n    const compare = isPositive ? greaterThanFn : lessThanFn;\n    const amount = isPositive ? one : calculator.decrement(zero);\n\n    let i = 0;\n\n    while (compare(remainder, zero)) {\n      if (!equalFn(ratios[i], zero)) {\n        shares[i] = calculator.add(shares[i], amount);\n        remainder = calculator.subtract(remainder, amount);\n      }\n\n      i++;\n    }\n\n    return shares;\n  };\n}\n","import type { Rate, ScaledAmount } from '../types';\n\nexport function isScaledAmount<TAmount>(\n  amount: Rate<TAmount>\n): amount is ScaledAmount<TAmount> {\n  return (amount as ScaledAmount<TAmount>)?.hasOwnProperty('amount');\n}\n","import type { ScaledAmount } from '../types';\n\nimport { isScaledAmount } from './isScaledAmount';\n\nexport function getAmountAndScale<TAmount>(\n  value: ScaledAmount<TAmount> | TAmount,\n  zero: TAmount\n) {\n  if (isScaledAmount(value)) {\n    return { amount: value.amount, scale: value?.scale ?? zero };\n  }\n\n  return { amount: value, scale: zero };\n}\n","import type { Calculator } from '../types';\n\nexport function getDivisors<TAmount>(calculator: Calculator<TAmount>) {\n  const { multiply } = calculator;\n\n  return (bases: readonly TAmount[]) => {\n    return bases.reduce<readonly TAmount[]>((divisors, _, i) => {\n      const divisor = bases.slice(i).reduce((acc, curr) => multiply(acc, curr));\n\n      return [...divisors, divisor];\n    }, []);\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from '.';\n\nexport function isEven<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const zero = calculator.zero();\n  const two = calculator.increment(calculator.increment(zero));\n\n  return (input: TAmount) => {\n    return equalFn(calculator.modulo(input, two), zero);\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal, absolute } from '.';\n\nexport function isHalf<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const absoluteFn = absolute(calculator);\n\n  return (input: TAmount, total: TAmount) => {\n    const remainder = absoluteFn(calculator.modulo(input, total));\n    const difference = calculator.subtract(total, remainder);\n\n    return equalFn(difference, remainder);\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { lessThan } from './lessThan';\n\ntype LessThanOrEqualCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a lessThanOrEqual function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The lessThanOrEqual function.\n */\nexport function lessThanOrEqual<TAmount>(\n  calculator: LessThanOrEqualCalculator<TAmount>\n) {\n  return (subject: TAmount, comparator: TAmount) => {\n    return (\n      lessThan(calculator)(subject, comparator) ||\n      equal(calculator)(subject, comparator)\n    );\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { lessThan } from './lessThan';\n\ntype MaximumCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a maximum function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The maximum function.\n */\nexport function maximum<TAmount>(calculator: MaximumCalculator<TAmount>) {\n  const lessThanFn = lessThan(calculator);\n\n  return (values: readonly TAmount[]) => {\n    return values.reduce((acc, curr) => {\n      return lessThanFn(acc, curr) ? curr : acc;\n    });\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { greaterThan } from './greaterThan';\n\ntype MinimumCalculator<TAmount> = Calculator<TAmount>;\n\n/**\n * Returns a minimum function.\n *\n * @param calculator - The calculator to use.\n *\n * @returns The minimum function.\n */\nexport function minimum<TAmount>(calculator: MinimumCalculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n\n  return (values: readonly TAmount[]) => {\n    return values.reduce((acc, curr) => {\n      return greaterThanFn(acc, curr) ? curr : acc;\n    });\n  };\n}\n","import type { Calculator } from '../types';\n\nimport { equal } from './equal';\nimport { lessThan } from './lessThan';\n\nexport function sign<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const lessThanFn = lessThan(calculator);\n  const zero = calculator.zero();\n\n  return (input: TAmount) => {\n    if (equalFn(input, zero)) {\n      return zero;\n    }\n\n    const one = calculator.increment(zero);\n    const minusOne = calculator.decrement(zero);\n\n    return lessThanFn(input, zero) ? minusOne : one;\n  };\n}\n","import type { Dinero } from '../types';\nimport { computeBase, equal } from '../utils';\n\nexport function haveSameCurrency<TAmount>(\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n) {\n  const [firstDinero, ...otherDineros] = dineroObjects;\n  const computeBaseFn = computeBase(firstDinero.calculator);\n\n  const { currency: comparator } = firstDinero.toJSON();\n  const equalFn = equal(firstDinero.calculator);\n  const comparatorBase = computeBaseFn(comparator.base);\n\n  return otherDineros.every((d) => {\n    const { currency: subject } = d.toJSON();\n    const subjectBase = computeBaseFn(subject.base);\n\n    return (\n      subject.code === comparator.code &&\n      equalFn(subjectBase, comparatorBase) &&\n      equalFn(subject.exponent, comparator.exponent)\n    );\n  });\n}\n","import type { DivideOperation } from '..';\nimport { equal, greaterThan } from '../utils';\n\n/**\n * Divide and round down.\n *\n * Rounding down happens whenever the quotient is not an integer.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const down: DivideOperation = (amount, factor, calculator) => {\n  const greaterThanFn = greaterThan(calculator);\n  const equalFn = equal(calculator);\n\n  const zero = calculator.zero();\n  const isPositive = greaterThanFn(amount, zero);\n  const quotient = calculator.integerDivide(amount, factor);\n  const remainder = calculator.modulo(amount, factor);\n  const isInteger = equalFn(remainder, zero);\n\n  if (isPositive || isInteger) {\n    return quotient;\n  }\n\n  return calculator.decrement(quotient);\n};\n","import type { DivideOperation } from '..';\nimport { sign, isHalf, absolute } from '../utils';\n\nimport { halfUp, up } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round away from zero.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfAwayFromZero: DivideOperation = (\n  amount,\n  factor,\n  calculator\n) => {\n  const signFn = sign(calculator);\n  const isHalfFn = isHalf(calculator);\n  const absoluteFn = absolute(calculator);\n\n  if (!isHalfFn(amount, factor)) {\n    return halfUp(amount, factor, calculator);\n  }\n\n  return calculator.multiply(\n    signFn(amount),\n    up(absoluteFn(amount), factor, calculator)\n  );\n};\n","import type { DivideOperation } from '..';\nimport { isHalf } from '../utils';\n\nimport { down, halfUp } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round down.\n *\n * Rounding down happens when:\n * - The quotient is half (e.g., -1.5, 1.5).\n * - The quotient is positive and less than half (e.g., 1.4).\n * - The quotient is negative and greater than half (e.g., -1.6).\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfDown: DivideOperation = (amount, factor, calculator) => {\n  const isHalfFn = isHalf(calculator);\n\n  if (isHalfFn(amount, factor)) {\n    return down(amount, factor, calculator);\n  }\n\n  return halfUp(amount, factor, calculator);\n};\n","import type { DivideOperation } from '..';\nimport { isEven, isHalf } from '../utils';\n\nimport { halfUp } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round to the nearest even integer.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfEven: DivideOperation = (amount, factor, calculator) => {\n  const isEvenFn = isEven(calculator);\n  const isHalfFn = isHalf(calculator);\n\n  const rounded = halfUp(amount, factor, calculator);\n\n  if (!isHalfFn(amount, factor)) {\n    return rounded;\n  }\n\n  return isEvenFn(rounded) ? rounded : calculator.decrement(rounded);\n};\n","import type { DivideOperation } from '..';\nimport { isEven, isHalf } from '../utils';\n\nimport { halfUp } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round to the nearest odd integer.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfOdd: DivideOperation = (amount, factor, calculator) => {\n  const isEvenFn = isEven(calculator);\n  const isHalfFn = isHalf(calculator);\n\n  const rounded = halfUp(amount, factor, calculator);\n\n  if (!isHalfFn(amount, factor)) {\n    return rounded;\n  }\n\n  return isEvenFn(rounded) ? calculator.decrement(rounded) : rounded;\n};\n","import type { DivideOperation } from '..';\nimport { sign, isHalf, absolute } from '../utils';\n\nimport { halfUp, down } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round towards zero.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfTowardsZero: DivideOperation = (\n  amount,\n  factor,\n  calculator\n) => {\n  const signFn = sign(calculator);\n  const isHalfFn = isHalf(calculator);\n  const absoluteFn = absolute(calculator);\n\n  if (!isHalfFn(amount, factor)) {\n    return halfUp(amount, factor, calculator);\n  }\n\n  return calculator.multiply(\n    signFn(amount),\n    down(absoluteFn(amount), factor, calculator)\n  );\n};\n","import type { DivideOperation } from '..';\nimport { absolute, greaterThan, isHalf } from '../utils';\n\nimport { down, up } from '.';\n\n/**\n * Divide and round towards \"nearest neighbor\" unless both neighbors are\n * equidistant, in which case round up.\n *\n * Rounding up happens when:\n * - The quotient is half (e.g., -1.5, 1.5).\n * - The quotient is positive and greater than half (e.g., 1.6).\n * - The quotient is negative and less than half (e.g., -1.4).\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const halfUp: DivideOperation = (amount, factor, calculator) => {\n  const greaterThanFn = greaterThan(calculator);\n  const isHalfFn = isHalf(calculator);\n  const absoluteFn = absolute(calculator);\n\n  const zero = calculator.zero();\n  const remainder = absoluteFn(calculator.modulo(amount, factor));\n  const difference = calculator.subtract(factor, remainder);\n  const isLessThanHalf = greaterThanFn(difference, remainder);\n  const isPositive = greaterThanFn(amount, zero);\n\n  if (\n    isHalfFn(amount, factor) ||\n    (isPositive && !isLessThanHalf) ||\n    (!isPositive && isLessThanHalf)\n  ) {\n    return up(amount, factor, calculator);\n  }\n\n  return down(amount, factor, calculator);\n};\n","import type { DivideOperation } from '..';\nimport { equal, greaterThan } from '../utils';\n\n/**\n * Divide and round up.\n *\n * Rounding up happens whenever the quotient is not an integer.\n *\n * @param amount - The amount to divide.\n * @param factor - The factor to divide by.\n * @param calculator - The calculator to use.\n *\n * @returns The rounded amount.\n */\nexport const up: DivideOperation = (amount, factor, calculator) => {\n  const greaterThanFn = greaterThan(calculator);\n  const equalFn = equal(calculator);\n\n  const zero = calculator.zero();\n  const isPositive = greaterThanFn(amount, zero);\n  const quotient = calculator.integerDivide(amount, factor);\n  const remainder = calculator.modulo(amount, factor);\n  const isInteger = equalFn(remainder, zero);\n\n  if (!isInteger && isPositive) {\n    return calculator.increment(quotient);\n  }\n\n  return quotient;\n};\n","import { down } from '../divide';\nimport type { Calculator, Dinero, DivideOperation } from '../types';\nimport { computeBase, greaterThan } from '../utils';\n\nexport type TransformScaleParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  newScale: TAmount,\n  divide?: DivideOperation\n];\n\nexport function transformScale<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n  const computeBaseFn = computeBase(calculator);\n\n  return function transformScaleFn(\n    ...[dineroObject, newScale, divide = down]: TransformScaleParams<TAmount>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n\n    const isLarger = greaterThanFn(newScale, scale);\n    const operation = isLarger ? calculator.multiply : divide;\n    const [a, b] = isLarger ? [newScale, scale] : [scale, newScale];\n    const base = computeBaseFn(currency.base);\n\n    const factor = calculator.power(base, calculator.subtract(a, b));\n\n    return dineroObject.create({\n      amount: operation(amount, factor, calculator),\n      currency,\n      scale: newScale,\n    });\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { equal, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nexport type NormalizeScaleParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nexport function normalizeScale<TAmount>(calculator: Calculator<TAmount>) {\n  const maximumFn = maximum(calculator);\n  const convertScaleFn = transformScale(calculator);\n  const equalFn = equal(calculator);\n\n  return function _normalizeScale(\n    ...[dineroObjects]: NormalizeScaleParams<TAmount>\n  ) {\n    const highestScale = dineroObjects.reduce((highest, current) => {\n      const { scale } = current.toJSON();\n\n      return maximumFn([highest, scale]);\n    }, calculator.zero());\n\n    return dineroObjects.map((d) => {\n      const { scale } = d.toJSON();\n\n      return !equalFn(scale, highestScale)\n        ? convertScaleFn(d, highestScale)\n        : d;\n    });\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type AddParams<TAmount> = readonly [\n  augend: Dinero<TAmount>,\n  addend: Dinero<TAmount>\n];\n\nfunction unsafeAdd<TAmount>(calculator: Calculator<TAmount>) {\n  return function add(...[augend, addend]: AddParams<TAmount>) {\n    const { amount: augendAmount, currency, scale } = augend.toJSON();\n    const { amount: addendAmount } = addend.toJSON();\n\n    const amount = calculator.add(augendAmount, addendAmount);\n\n    return augend.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeAdd<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const addFn = unsafeAdd(calculator);\n\n  return function add(...[augend, addend]: AddParams<TAmount>) {\n    const condition = haveSameCurrency([augend, addend]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [newAugend, newAddend] = normalizeFn([augend, addend]);\n\n    return addFn(newAugend, newAddend);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { INVALID_RATIOS_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero, ScaledAmount } from '../types';\nimport {\n  distribute,\n  equal,\n  getAmountAndScale,\n  greaterThan,\n  greaterThanOrEqual,\n  maximum,\n} from '../utils';\n\nimport { transformScale } from './transformScale';\n\ntype UnsafeAllocateParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  ratios: ReadonlyArray<ScaledAmount<TAmount>>\n];\n\nfunction unsafeAllocate<TAmount>(calculator: Calculator<TAmount>) {\n  return function allocate(\n    ...[dineroObject, ratios]: UnsafeAllocateParams<TAmount>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const distributeFn = distribute(calculator);\n    const shares = distributeFn(\n      amount,\n      ratios.map((ratio) => ratio.amount)\n    );\n\n    return shares.map((share) => {\n      return dineroObject.create({\n        amount: share,\n        currency,\n        scale,\n      });\n    });\n  };\n}\n\nexport type AllocateParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  ratios: ReadonlyArray<ScaledAmount<TAmount> | TAmount>\n];\n\nexport function safeAllocate<TAmount>(calculator: Calculator<TAmount>) {\n  const allocateFn = unsafeAllocate(calculator);\n  const greaterThanOrEqualFn = greaterThanOrEqual(calculator);\n  const greaterThanFn = greaterThan(calculator);\n  const convertScaleFn = transformScale(calculator);\n  const maximumFn = maximum(calculator);\n  const equalFn = equal(calculator);\n  const zero = calculator.zero();\n  const ten = new Array(10).fill(null).reduce(calculator.increment, zero);\n\n  return function allocate(...[dineroObject, ratios]: AllocateParams<TAmount>) {\n    const hasRatios = ratios.length > 0;\n    const scaledRatios = ratios.map((ratio) => getAmountAndScale(ratio, zero));\n    const highestRatioScale = hasRatios\n      ? maximumFn(scaledRatios.map(({ scale }) => scale))\n      : zero;\n    const normalizedRatios = scaledRatios.map(({ amount, scale }) => {\n      const factor = equalFn(scale, highestRatioScale)\n        ? zero\n        : calculator.subtract(highestRatioScale, scale);\n\n      return {\n        amount: calculator.multiply(amount, calculator.power(ten, factor)),\n        scale,\n      };\n    });\n    const hasOnlyPositiveRatios = normalizedRatios.every(({ amount }) =>\n      greaterThanOrEqualFn(amount, zero)\n    );\n    const hasOneNonZeroRatio = normalizedRatios.some(({ amount }) =>\n      greaterThanFn(amount, zero)\n    );\n\n    const condition = hasRatios && hasOnlyPositiveRatios && hasOneNonZeroRatio;\n    assert(condition, INVALID_RATIOS_MESSAGE);\n\n    const { scale } = dineroObject.toJSON();\n    const newScale = calculator.add(scale, highestRatioScale);\n\n    return allocateFn(convertScaleFn(dineroObject, newScale), normalizedRatios);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { compare as cmp } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type CompareParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeCompare<TAmount>(calculator: Calculator<TAmount>) {\n  const compareFn = cmp(calculator);\n\n  return function compare(\n    ...[dineroObject, comparator]: CompareParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return compareFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeCompare<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const compareFn = unsafeCompare(calculator);\n\n  return function compare(\n    ...[dineroObject, comparator]: CompareParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return compareFn(subjectAmount, comparatorAmount);\n  };\n}\n","import type { Currency } from '@dinero.js/currencies';\n\nimport type { Calculator, Dinero, Rates } from '../types';\nimport { getAmountAndScale, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nexport type ConvertParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  newCurrency: Currency<TAmount>,\n  rates: Rates<TAmount>\n];\n\nexport function convert<TAmount>(calculator: Calculator<TAmount>) {\n  const convertScaleFn = transformScale(calculator);\n  const maximumFn = maximum(calculator);\n  const zero = calculator.zero();\n\n  return function convertFn(\n    ...[dineroObject, newCurrency, rates]: ConvertParams<TAmount>\n  ) {\n    const rate = rates[newCurrency.code];\n    const { amount, scale } = dineroObject.toJSON();\n    const { amount: rateAmount, scale: rateScale } = getAmountAndScale(\n      rate,\n      zero\n    );\n\n    const newScale = calculator.add(scale, rateScale);\n\n    return convertScaleFn(\n      dineroObject.create({\n        amount: calculator.multiply(amount, rateAmount),\n        currency: newCurrency,\n        scale: newScale,\n      }),\n      maximumFn([newScale, newCurrency.exponent])\n    );\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { equal } from '../utils';\n\nimport { normalizeScale } from './normalizeScale';\n\nexport type HaveSameAmountParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nexport function haveSameAmount<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const equalFn = equal(calculator);\n\n  return function _haveSameAmount(\n    ...[dineroObjects]: HaveSameAmountParams<TAmount>\n  ) {\n    const [firstDinero, ...otherDineros] = normalizeFn(dineroObjects);\n    const { amount: comparatorAmount } = firstDinero.toJSON();\n\n    return otherDineros.every((d) => {\n      const { amount: subjectAmount } = d.toJSON();\n\n      return equalFn(subjectAmount, comparatorAmount);\n    });\n  };\n}\n","import type { Calculator, Dinero } from '../types';\n\nimport { haveSameAmount } from './haveSameAmount';\nimport { haveSameCurrency } from './haveSameCurrency';\n\nexport type EqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nexport function equal<TAmount>(calculator: Calculator<TAmount>) {\n  return function _equal(...[dineroObject, comparator]: EqualParams<TAmount>) {\n    return (\n      haveSameAmount(calculator)([dineroObject, comparator]) &&\n      haveSameCurrency([dineroObject, comparator])\n    );\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { greaterThan as gt } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type GreaterThanParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeGreaterThan<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = gt(calculator);\n\n  return function greaterThan(\n    ...[dineroObject, comparator]: GreaterThanParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return greaterThanFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeGreaterThan<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const greaterThanFn = unsafeGreaterThan(calculator);\n\n  return function greaterThan(\n    ...[dineroObject, comparator]: GreaterThanParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return greaterThanFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { greaterThanOrEqual as gte } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type GreaterThanOrEqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeGreaterThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanOrEqualFn = gte(calculator);\n\n  return function greaterThanOrEqual(\n    ...[dineroObject, comparator]: GreaterThanOrEqualParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return greaterThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeGreaterThanOrEqual<TAmount>(\n  calculator: Calculator<TAmount>\n) {\n  const normalizeFn = normalizeScale(calculator);\n  const greaterThanOrEqualFn = unsafeGreaterThanOrEqual(calculator);\n\n  return function greaterThanOrEqual(\n    ...[dineroObject, comparator]: GreaterThanOrEqualParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return greaterThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { computeBase, equal } from '../utils';\n\nexport type HasSubUnitsParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function hasSubUnits<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n  const computeBaseFn = computeBase(calculator);\n\n  return function _hasSubUnits(...[dineroObject]: HasSubUnitsParams<TAmount>) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const base = computeBaseFn(currency.base);\n\n    return !equalFn(\n      calculator.modulo(amount, calculator.power(base, scale)),\n      calculator.zero()\n    );\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { lessThan } from '../utils';\n\nexport type IsNegativeParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function isNegative<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanFn = lessThan(calculator);\n\n  return function _isNegative(...[dineroObject]: IsNegativeParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return lessThanFn(amount, calculator.zero());\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { greaterThan } from '../utils';\n\nexport type IsPositiveParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>\n];\n\nexport function isPositive<TAmount>(calculator: Calculator<TAmount>) {\n  const greaterThanFn = greaterThan(calculator);\n\n  return function _isPositive(...[dineroObject]: IsPositiveParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return greaterThanFn(amount, calculator.zero());\n  };\n}\n","import type { Calculator, Dinero } from '../types';\nimport { equal } from '../utils';\n\nexport type IsZeroParams<TAmount> = readonly [dineroObject: Dinero<TAmount>];\n\nexport function isZero<TAmount>(calculator: Calculator<TAmount>) {\n  const equalFn = equal(calculator);\n\n  return function _isZero(...[dineroObject]: IsZeroParams<TAmount>) {\n    const { amount } = dineroObject.toJSON();\n\n    return equalFn(amount, calculator.zero());\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { lessThan as lt } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type LessThanParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeLessThan<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanFn = lt(calculator);\n\n  return function lessThan(\n    ...[dineroObject, comparator]: LessThanParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return lessThanFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeLessThan<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const lessThanFn = unsafeLessThan(calculator);\n\n  return function lessThan(\n    ...[dineroObject, comparator]: LessThanParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return lessThanFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { lessThanOrEqual as lte } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type LessThanOrEqualParams<TAmount> = readonly [\n  dineroObject: Dinero<TAmount>,\n  comparator: Dinero<TAmount>\n];\n\nfunction unsafeLessThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const lessThanOrEqualFn = lte(calculator);\n\n  return function lessThanOrEqual(\n    ...[dineroObject, comparator]: LessThanOrEqualParams<TAmount>\n  ) {\n    const dineroObjects = [dineroObject, comparator];\n\n    const [subjectAmount, comparatorAmount] = dineroObjects.map((d) => {\n      const { amount } = d.toJSON();\n\n      return amount;\n    });\n\n    return lessThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n\nexport function safeLessThanOrEqual<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const lessThanOrEqualFn = unsafeLessThanOrEqual(calculator);\n\n  return function lessThanOrEqual(\n    ...[dineroObject, comparator]: LessThanOrEqualParams<TAmount>\n  ) {\n    const condition = haveSameCurrency([dineroObject, comparator]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [subjectAmount, comparatorAmount] = normalizeFn([\n      dineroObject,\n      comparator,\n    ]);\n\n    return lessThanOrEqualFn(subjectAmount, comparatorAmount);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { maximum as max } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type MaximumParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nfunction unsafeMaximum<TAmount>(calculator: Calculator<TAmount>) {\n  const maxFn = max(calculator);\n\n  return function maximum(...[dineroObjects]: MaximumParams<TAmount>) {\n    const [firstDinero] = dineroObjects;\n    const { currency, scale } = firstDinero.toJSON();\n\n    const amount = maxFn(\n      dineroObjects.map((subject) => {\n        const { amount: subjectAmount } = subject.toJSON();\n\n        return subjectAmount;\n      })\n    );\n\n    return firstDinero.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeMaximum<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const maxFn = unsafeMaximum(calculator);\n\n  return function maximum(...[dineroObjects]: MaximumParams<TAmount>) {\n    const condition = haveSameCurrency(dineroObjects);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const normalizedDineroObjects = normalizeFn(dineroObjects);\n\n    return maxFn(normalizedDineroObjects);\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\nimport { minimum as min } from '../utils';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type MinimumParams<TAmount> = readonly [\n  dineroObjects: ReadonlyArray<Dinero<TAmount>>\n];\n\nfunction unsafeMinimum<TAmount>(calculator: Calculator<TAmount>) {\n  const minFn = min(calculator);\n\n  return function minimum(...[dineroObjects]: MinimumParams<TAmount>) {\n    const [firstDinero] = dineroObjects;\n    const { currency, scale } = firstDinero.toJSON();\n\n    const amount = minFn(\n      dineroObjects.map((subject) => {\n        const { amount: subjectAmount } = subject.toJSON();\n\n        return subjectAmount;\n      })\n    );\n\n    return firstDinero.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeMinimum<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const minFn = unsafeMinimum(calculator);\n\n  return function maximum(...[dineroObjects]: MinimumParams<TAmount>) {\n    const condition = haveSameCurrency(dineroObjects);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const normalizedDineroObjects = normalizeFn(dineroObjects);\n\n    return minFn(normalizedDineroObjects);\n  };\n}\n","import type { Calculator, Dinero, ScaledAmount } from '../types';\nimport { getAmountAndScale } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nexport type MultiplyParams<TAmount> = readonly [\n  multiplicand: Dinero<TAmount>,\n  multiplier: ScaledAmount<TAmount> | TAmount\n];\n\nexport function multiply<TAmount>(calculator: Calculator<TAmount>) {\n  const convertScaleFn = transformScale(calculator);\n  const zero = calculator.zero();\n\n  return function multiplyFn(\n    ...[multiplicand, multiplier]: MultiplyParams<TAmount>\n  ) {\n    const { amount, currency, scale } = multiplicand.toJSON();\n    const { amount: multiplierAmount, scale: multiplierScale } =\n      getAmountAndScale(multiplier, zero);\n\n    const newScale = calculator.add(scale, multiplierScale);\n\n    return convertScaleFn(\n      multiplicand.create({\n        amount: calculator.multiply(amount, multiplierAmount),\n        currency,\n        scale: newScale,\n      }),\n      newScale\n    );\n  };\n}\n","/* eslint-disable functional/no-expression-statement */\nimport { UNEQUAL_CURRENCIES_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero } from '../types';\n\nimport { haveSameCurrency } from './haveSameCurrency';\nimport { normalizeScale } from './normalizeScale';\n\nexport type SubtractParams<TAmount> = readonly [\n  minuend: Dinero<TAmount>,\n  subtrahend: Dinero<TAmount>\n];\n\nfunction unsafeSubtract<TAmount>(calculator: Calculator<TAmount>) {\n  return function subtract(...[minuend, subtrahend]: SubtractParams<TAmount>) {\n    const { amount: minuendAmount, currency, scale } = minuend.toJSON();\n    const { amount: subtrahendAmount } = subtrahend.toJSON();\n\n    const amount = calculator.subtract(minuendAmount, subtrahendAmount);\n\n    return minuend.create({\n      amount,\n      currency,\n      scale,\n    });\n  };\n}\n\nexport function safeSubtract<TAmount>(calculator: Calculator<TAmount>) {\n  const normalizeFn = normalizeScale(calculator);\n  const subtractFn = unsafeSubtract(calculator);\n\n  return function subtract(...[minuend, subtrahend]: SubtractParams<TAmount>) {\n    const condition = haveSameCurrency([minuend, subtrahend]);\n    assert(condition, UNEQUAL_CURRENCIES_MESSAGE);\n\n    const [newMinuend, newSubtrahend] = normalizeFn([minuend, subtrahend]);\n\n    return subtractFn(newMinuend, newSubtrahend);\n  };\n}\n","import type { Calculator, Dinero, Transformer } from '../types';\nimport { isArray, getDivisors } from '../utils';\n\nexport type ToUnitsParams<TAmount, TOutput> = readonly [\n  dineroObject: Dinero<TAmount>,\n  transformer?: Transformer<TAmount, TOutput, readonly TAmount[]>\n];\n\nexport function toUnits<TAmount, TOutput>(calculator: Calculator<TAmount>) {\n  const getDivisorsFn = getDivisors(calculator);\n\n  return function toUnitsFn(\n    ...[dineroObject, transformer]: ToUnitsParams<TAmount, TOutput>\n  ) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const { power, integerDivide, modulo } = calculator;\n\n    const bases = isArray(currency.base) ? currency.base : [currency.base];\n    const divisors = getDivisorsFn(bases.map((base) => power(base, scale)));\n    const value = divisors.reduce<readonly TAmount[]>(\n      (amounts, divisor, index) => {\n        const amountLeft = amounts[index];\n\n        const quotient = integerDivide(amountLeft, divisor);\n        const remainder = modulo(amountLeft, divisor);\n\n        return [...amounts.filter((_, i) => i !== index), quotient, remainder];\n      },\n      [amount]\n    );\n\n    if (!transformer) {\n      return value;\n    }\n\n    return transformer({ value, currency });\n  };\n}\n","import { NON_DECIMAL_CURRENCY_MESSAGE } from '../checks';\nimport { assert } from '../helpers';\nimport type { Calculator, Dinero, Formatter, Transformer } from '../types';\nimport { absolute, computeBase, equal, isArray, lessThan } from '../utils';\n\nimport { toUnits } from './toUnits';\n\nexport type ToDecimalParams<TAmount, TOutput> = readonly [\n  dineroObject: Dinero<TAmount>,\n  transformer?: Transformer<TAmount, TOutput, string>\n];\n\nexport function toDecimal<TAmount, TOutput>(calculator: Calculator<TAmount>) {\n  const toUnitsFn = toUnits<TAmount, readonly TAmount[]>(calculator);\n  const computeBaseFn = computeBase(calculator);\n  const equalFn = equal(calculator);\n\n  return function toDecimalFn(\n    ...[dineroObject, transformer]: ToDecimalParams<TAmount, TOutput>\n  ) {\n    const { currency, scale } = dineroObject.toJSON();\n\n    const base = computeBaseFn(currency.base);\n    const zero = calculator.zero();\n    const ten = new Array(10).fill(null).reduce(calculator.increment, zero);\n\n    const isMultiBase = isArray(currency.base);\n    const isBaseTen = equalFn(calculator.modulo(base, ten), zero);\n    const isDecimal = !isMultiBase && isBaseTen;\n\n    // eslint-disable-next-line functional/no-expression-statement\n    assert(isDecimal, NON_DECIMAL_CURRENCY_MESSAGE);\n\n    const units = toUnitsFn(dineroObject);\n\n    const getDecimalFn = getDecimal(calculator, dineroObject.formatter);\n    const value = getDecimalFn(units, scale);\n\n    if (!transformer) {\n      return value;\n    }\n\n    return transformer({ value, currency });\n  };\n}\n\nfunction getDecimal<TAmount>(\n  calculator: Calculator<TAmount>,\n  formatter: Formatter<TAmount>\n) {\n  const absoluteFn = absolute(calculator);\n  const equalFn = equal(calculator);\n  const lessThanFn = lessThan(calculator);\n  const zero = calculator.zero();\n\n  return (units: readonly TAmount[], scale: TAmount) => {\n    const whole = formatter.toString(units[0]);\n    const fractional = formatter.toString(absoluteFn(units[1]));\n\n    const scaleNumber = formatter.toNumber(scale);\n    const decimal = `${whole}.${fractional.padStart(scaleNumber, '0')}`;\n\n    const leadsWithZero = equalFn(units[0], zero);\n    const isNegative = lessThanFn(units[1], zero);\n\n    // A leading negative zero is a special case because the `toString`\n    // formatter won't preserve its negative sign (since 0 === -0).\n    return leadsWithZero && isNegative ? `-${decimal}` : decimal;\n  };\n}\n","import type { Dinero } from '../types';\n\nexport function toSnapshot<TAmount>(dineroObject: Dinero<TAmount>) {\n  return dineroObject.toJSON();\n}\n","import type { Calculator, Dinero } from '../types';\nimport { computeBase, countTrailingZeros, equal, maximum } from '../utils';\n\nimport { transformScale } from './transformScale';\n\nexport type TrimScaleParams<TAmount> = readonly [dineroObject: Dinero<TAmount>];\n\nexport function trimScale<TAmount>(calculator: Calculator<TAmount>) {\n  const countTrailingZerosFn = countTrailingZeros(calculator);\n  const equalFn = equal(calculator);\n  const maximumFn = maximum(calculator);\n  const transformScaleFn = transformScale(calculator);\n  const computeBaseFn = computeBase(calculator);\n\n  return function trimScaleFn(...[dineroObject]: TrimScaleParams<TAmount>) {\n    const { amount, currency, scale } = dineroObject.toJSON();\n    const base = computeBaseFn(currency.base);\n\n    const trailingZerosLength = countTrailingZerosFn(amount, base);\n    const difference = calculator.subtract(scale, trailingZerosLength);\n    const newScale = maximumFn([difference, currency.exponent]);\n\n    if (equalFn(newScale, scale)) {\n      return dineroObject;\n    }\n\n    return transformScaleFn(dineroObject, newScale);\n  };\n}\n"],"names":["INVALID_AMOUNT_MESSAGE","INVALID_SCALE_MESSAGE","INVALID_RATIOS_MESSAGE","UNEQUAL_SCALES_MESSAGE","UNEQUAL_CURRENCIES_MESSAGE","NON_DECIMAL_CURRENCY_MESSAGE","assert","condition","message","Error","createDinero","calculator","onCreate","formatter","toNumber","Number","toString","String","dinero","amount","currency","code","base","exponent","scale","create","toJSON","ComparisonOperator","equal","subject","comparator","compare","EQ","lessThan","LT","absolute","equalFn","lessThanFn","zero","input","minusOne","decrement","multiply","isArray","maybeArray","Array","computeBase","reduce","acc","curr","countTrailingZeros","i","temp","modulo","integerDivide","increment","greaterThan","GT","greaterThanOrEqual","distribute","value","ratios","greaterThanFn","greaterThanOrEqualFn","one","total","a","b","add","remainder","shares","map","ratio","share","subtract","isPositive","isScaledAmount","hasOwnProperty","getAmountAndScale","getDivisors","bases","divisors","_","divisor","slice","isEven","two","isHalf","absoluteFn","difference","lessThanOrEqual","maximum","values","minimum","sign","haveSameCurrency","dineroObjects","firstDinero","otherDineros","computeBaseFn","comparatorBase","every","d","subjectBase","down","factor","quotient","isInteger","halfAwayFromZero","signFn","isHalfFn","halfUp","up","halfDown","halfEven","isEvenFn","rounded","halfOdd","halfTowardsZero","isLessThanHalf","transformScale","transformScaleFn","dineroObject","newScale","divide","isLarger","operation","power","normalizeScale","maximumFn","convertScaleFn","_normalizeScale","highestScale","highest","current","unsafeAdd","augend","addend","augendAmount","addendAmount","safeAdd","normalizeFn","addFn","newAugend","newAddend","unsafeAllocate","allocate","distributeFn","safeAllocate","allocateFn","ten","fill","hasRatios","length","scaledRatios","highestRatioScale","normalizedRatios","hasOnlyPositiveRatios","hasOneNonZeroRatio","some","unsafeCompare","compareFn","cmp","subjectAmount","comparatorAmount","safeCompare","convert","convertFn","newCurrency","rates","rate","rateAmount","rateScale","haveSameAmount","_haveSameAmount","_equal","unsafeGreaterThan","gt","safeGreaterThan","unsafeGreaterThanOrEqual","gte","safeGreaterThanOrEqual","hasSubUnits","_hasSubUnits","isNegative","_isNegative","_isPositive","isZero","_isZero","unsafeLessThan","lt","safeLessThan","unsafeLessThanOrEqual","lessThanOrEqualFn","lte","safeLessThanOrEqual","unsafeMaximum","maxFn","max","safeMaximum","normalizedDineroObjects","unsafeMinimum","minFn","min","safeMinimum","multiplyFn","multiplicand","multiplier","multiplierAmount","multiplierScale","unsafeSubtract","minuend","subtrahend","minuendAmount","subtrahendAmount","safeSubtract","subtractFn","newMinuend","newSubtrahend","toUnits","getDivisorsFn","toUnitsFn","transformer","amounts","index","amountLeft","filter","toDecimal","toDecimalFn","isMultiBase","isBaseTen","isDecimal","units","getDecimalFn","getDecimal","whole","fractional","scaleNumber","decimal","padStart","leadsWithZero","toSnapshot","trimScale","countTrailingZerosFn","trimScaleFn","trailingZerosLength"],"mappings":"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"}